{"version":3,"sources":["core/stores/slices/share.ts","core/stores/slices/auth/authSlice.ts","core/stores/slices/message/messageSlice.ts","core/stores/slices/folder/folderSlice.ts","core/stores/slices/profile/profileSlice.ts","core/stores/slices/bar/barSlice.ts","core/components/blocks/bar/SidebarData.tsx","core/components/atoms/Buttons/AuthButton.tsx","core/components/blocks/bar/navbar/NavbarElements.tsx","core/components/atoms/Buttons/ButtonDesign.tsx","core/components/atoms/Buttons/AuthButtonSub.tsx","core/components/blocks/bar/navbar/Navbar.tsx","core/components/blocks/bar/sidebar/SidebarElements.tsx","core/components/blocks/bar/sidebar/Sidebar.tsx","core/components/atoms/Alert/InfoAlert.tsx","core/components/atoms/Form/FormElements.tsx","core/components/atoms/Buttons/AuthFormButton.tsx","core/components/atoms/Loader.tsx","core/components/atoms/Alert/AlertElements.tsx","core/components/atoms/Alert/ErrorAlert.tsx","core/components/pages/auth/Login.tsx","core/components/pages/auth/SignUp/SignUp.tsx","core/components/pages/auth/SignUp/SignUpAfter.tsx","core/components/pages/auth/SignUp/UserActive.tsx","core/components/pages/auth/ResetPassword/ResetPassword.tsx","core/components/pages/auth/ResetPassword/ResetPasswordAfter.tsx","core/components/pages/auth/ResetPassword/ResetPasswordConfirm.tsx","core/components/atoms/Buttons/TopLinkButton.tsx","core/components/atoms/Modal/ModalElements.tsx","core/components/atoms/Modal/ModalWrapper.tsx","core/components/atoms/Buttons/SubmitButton.tsx","core/components/blocks/profile/EditProfile.tsx","core/components/blocks/main/MainElements.tsx","core/components/blocks/main/MainHeader.tsx","core/components/pages/profile/ProfileElements.tsx","core/components/pages/profile/Profile.tsx","core/components/blocks/folder/NewFolder.tsx","core/stores/slices/post/postSlice.ts","core/components/atoms/Input/InputElements.tsx","core/components/atoms/Input/SearchBox.tsx","core/components/atoms/Input/PublicSelect.tsx","core/components/atoms/TopOrderSelect.tsx","core/components/atoms/Buttons/SearchButton.tsx","core/components/blocks/folder/FolderElements.tsx","core/components/blocks/folder/FolderList.tsx","core/components/blocks/folder/FolderListItem.tsx","core/components/pages/folder/MyFolders.tsx","core/components/atoms/Dialog.tsx","core/components/blocks/folder/EditFolder.tsx","core/components/atoms/PostOrderSelect.tsx","core/components/blocks/post/NewPost.tsx","core/components/blocks/post/EditPost.tsx","core/components/blocks/post/PostURLField.tsx","core/components/blocks/post/PostsElements.tsx","core/components/blocks/post/PostsListItem.tsx","core/components/blocks/post/CheckPost.tsx","core/components/blocks/post/Posts.tsx","core/components/atoms/Buttons/FavoriteButton.tsx","core/components/blocks/folder/FolderDetailInfo.tsx","core/components/pages/folder/FolderDetail.tsx","core/components/atoms/OrderSelect.tsx","core/components/pages/folder/Folders.tsx","core/components/atoms/FavoriteFolerOrderSelect.tsx","core/components/pages/folder/FavoriteFolders.tsx","core/components/route/PrivateRoute.tsx","core/components/route/UnAuthRoute.tsx","core/components/route/ScrollToTop.tsx","core/components/route/RouteElements.tsx","core/components/route/Route.tsx","core/components/blocks/LoadingScreen/LoadingScreenElements.tsx","core/components/blocks/LoadingScreen/LoadingScreen.tsx","core/App.tsx","core/stores/app/store.ts","serviceWorker.ts","index.tsx"],"names":["apiURL","fetchAsyncLogin","createAsyncThunk","auth","a","axios","post","headers","res","data","fetchAsyncRegister","rejectWithValue","then","response","catch","error","fetchAsyncUserActivate","fetchAsyncResetPassword","fetchAsyncResetPasswordConfirm","authSlice","createSlice","name","initialState","isAuth","isUserActive","isAfterRegister","isAfterResetPassword","isLoadingAuth","errorMessages","reducers","fetchCredStart","state","fetchCredEnd","setIsAuth","resetIsAuth","setIsAfterRegister","resetIsAfterRegister","setIsAfterResetPassword","resetIsAfterResetPassword","setAuthErrorMessage","action","payload","resetAuthErrorMessage","extraReducers","builder","addCase","fulfilled","localStorage","setItem","access","rejected","email","password","re_password","actions","selectIsAuth","selectIsUserActive","selectIsLoadingAuth","selectIsAfterRegister","selectIsAfterResetPassword","selectAuthErrorMessage","messageSlice","infoMessage","errorMessage","isExistInfoMessage","setInfoMessage","resetInfoMessage","setErrorMessage","resetErrorMessage","setIsExistInfoMessage","resetIsExistInfoMessage","selectIsExistMessage","message","selectInfoMessage","fetchAsyncGetFolder","id","ajt","get","Authorization","fetchAsyncGetMyFolders","_","fetchAsyncGetFolders","params","url","ordering","search","fetchAsyncGetFavoriteFolders","fetchAsyncCreateFolder","folder","public","code","fetchAsyncUpdateFolder","put","fetchAsyncDeleteFolder","delete","fetchAsyncPostFavorite","folderSlice","isLoadingFolder","isLoadingFavorite","isSetFolder","hasMyFolder","isExistFolders","isExistFavoriteFolders","openNewFolder","openEditFolder","openDeleteFolder","numOfFavorite","user","posts_add","favorite","myfolders","myfoldersSearchResult","folders","count","next","previous","results","favoritefolders","fetchFolderStart","fetchFolderEnd","fetchFavoriteStart","fetchFavoriteEnd","setIsSetFolder","resetIsSetFolder","setIsExistFolders","resetIsExistFolders","setIsExistFavoriteFolders","resetIsExistFavoriteFolders","setHasMyFolder","resetHasMyFolder","setOpenNewFolder","resetOpenNewFolder","setOpenEditFolder","resetOpenEditFolder","setOpenDeleteFolder","resetOpenDeleteFolder","resetMyFoldersCount","resetFoldersCount","resetFavoriteFoldersCount","setFolderErrorMessage","resetFolderErrorMessage","setFolder","searchMyFolders","concat","folders_sort","reverse","filter","includes","String","length","favoriteNum","forEach","unshift","map","result","currentfolder","folderWithoutFavorite","isFavorite","selectIsLoadingFolder","selectHasMyFolder","selectIsExistFolders","selectIsExistFavoriteFolders","selectIsLoadingFavorite","selectNumOfFavorite","selectFolderErrorMessages","selectMyFoldersSearchResult","selectFolders","selectFavoriteFolders","selectOpenDeleteFolder","selectOpenNewFolder","selectOpenEditFolder","selectFolder","fetchAsyncGetMyProf","fetchAsyncGetProfs","fetchAsyncCreateProf","profile","nickname","fetchAsyncUpdateProf","profileInitialState","isLoadingProf","openProfile","myprofile","created_on","profiles","profileSlice","fetchProfStart","fetchProfEnd","setOpenProfile","resetOpenProfile","setProfileErrorMessage","resetProfileErrorMessage","editNickname","resetProfile","prof","selectIsLoadingProf","selectOpenProfile","selectProfileErrorMessages","selectMyProfile","barSlice","activeIndex","setActiveIndex","resetActiveIndex","selectActiveIndex","bar","SidebarData","title","path","icon","BarDataIndex","AuthButton","clickFunc","ButtonText","Button","variant","onClick","bgColor","borderColor","iconColor","txColor","mainColor","NavBarWrapper","styled","div","TopBarLeftItems","MenuBars","AppLogo","Link","TopBarRightItems","TopBarProfile","TopBarProfileIconLink","ProfileIcon","CgProfile","SignInLink","NavMenu","nav","NavMenuItems","ul","NavBarToggle","li","NavText","NavLink","AuthBtn","button","SubmitBtn","LoadingButton","AuthFormBtn","SearchBtn","OpenModalBtn","OpenEditProfileBtn","TopLinkBtn","Navbar","dispatch","useDispatch","useSelector","history","useHistory","useState","sidebar","setSidebar","useEffect","getMyProf","match","e","console","log","showSidebar","Provider","value","color","to","removeItem","push","className","item","index","SideMenu","SideMenuItem","MenuItemLink","MenuItemLinkActive","SideMenuItems","Sidebar","InfoAlert","isExistMessage","handleClose","event","reason","IconButton","size","fontSize","Snackbar","open","autoHideDuration","onClose","TxField","TextField","SwitchWrapper","SwitchLabel","label","SwitchSelect","SwitchSelectText","p","ErrorMessage","BottomActions","CancelButton","AuthFormWrapper","AuthFormHeading","h3","AuthFormInfo","LoaderWrapper","AuthFormBottomLinkWrapper","AuthFormBottomLink","AuthFormText","AuthFormButton","isLoading","disabled","loading","type","Loading","height","width","ErrorAlertWrapper","ErrorAlert","text","Alert","severity","LoginPage","useLocation","authErrorMessages","initialErrors","initialValues","onSubmit","values","replace","from","validationSchema","Yup","shape","required","handleSubmit","handleChange","handleBlur","errors","touched","isValid","placeholder","onChange","onBlur","SignUpPage","resultReg","min","oneOf","SignUpAfterPage","UserActivePage","uid","useParams","token","userActivate","ResetPasswordPage","ResetPasswordAfterPage","ResetPasswordCofirmPage","new_password","re_new_password","TopLinkButton","ModalBox","Box","ModalWrapper","isOpen","closeFunc","children","Modal","keepMounted","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","SubmitButton","EditProfile","profileErrorMessages","max","preventDefault","MainHeaderItemWrapper","MainHeaderLeftItems","MainHeaderTitle","h4","MainBody","FolderSection","SearchSection","SearchContent","SearchFieldWrapper","NotFoundText","LoadingWrapper","MainHeader","isHistory","buttonElem","ProfileItemWrapper","ProfileLeftItem","ProfileRightItems","ProfileInfoContent","OtherInfoContent","EditButtonWrapper","ProfileTableHead","TableCell","ProfileTableCell","OtherInfoTableContainer","TableContainer","OtherInfoTable","Table","Profile","component","Paper","TableHead","TableRow","align","colSpan","TableBody","NewFolder","folderErrorMessages","Switch","checked","inputProps","fetchAsyncGetPosts","props","fetchAsyncCreatePost","fetchAsyncUpdatePost","fetchAsyncDeletePost","fetchAsyncDeleteSelectPost","id_list","postSlice","isLoadingPost","isNewPost","isExistPosts","openNewPost","openEditPost","openDeletePost","posts","fetchPostStart","fetchPostEnd","setIsNewPost","resetIsNewPost","setIsExistPosts","resetIsExistPosts","setOpenNewPost","resetOpenNewPost","setOpenEditPost","resetOpenEditPost","setOpenDeletePost","resetOpenDeletePost","setPostErrorMessage","resetPostErrorMessage","resetPostsCount","resetPosts","selectIsLoadingPost","selectIsExistPosts","selectIsNewPost","selectPosts","selectOpenNewPost","selectOpenEditPost","selectPostErrorMessages","SearchField","PublicRadioWrapper","input","RadioGroup","SearchBox","changeEvent","PublicSelect","checkedNot","checkedPublic","checkedPrivate","FormControl","FormLabel","row","defaultValue","FormControlLabel","control","Radio","OrderSelect","selectValue","sx","minWidth","fullWidth","InputLabel","Select","labelId","MenuItem","SearchButton","FolderItemLink","FList","List","FListItem","ListItem","FListItemText","ListItemText","FolderAvatar","Avatar","FolderDetailInfoWrapper","FolderDetailInfoData","FolderDetailInfoButtons","FolderDetailInfoDataTitle","h2","FolderDetailInfoDataText","FolderList","bgcolor","FolderListItem","ListItemAvatar","primary","secondary","MyFoldersPage","searchText","setSearchText","orderingText","setOrderingText","Public","setPublic","window","scrollTo","top","searchFolder","target","TopOrderSelect","Divider","CommonDialog","msg","doYes","doNo","Dialog","DialogContent","DialogActions","EditFolder","PostOrderSelect","NewPost","postErrorMessages","matches","multiline","EditPost","PostURLField","display","alignItems","InputBase","ml","flex","readOnly","m","orientation","href","rel","PostListItemName","PostListItemText","PostListItemWithCheckBox","WCPostListItem","PostCheckBoxWrapper","PostEditButtonWrapper","PostSectionHeader","PostCreateButton","PostSelectDeleteButton","PostListItem","Accordion","borderBottom","AccordionSummary","expandIcon","AccordionDetails","useMultiplePostChecked","canCheckItems","initVal","setChecked","toggleChecked","tgt","allCheck","clearCheck","Posts","hasMore","setHasMore","editPostId","setEditPostId","editPostUrl","setEditPostUrl","editPostName","setEditPostName","editPostText","setEditPostText","checkBoxToggle","setCheckBoxToggle","loadMore","nextUrl","searchPost","deleteSelectPost","postListInMyFolder","Checkbox","postListOthers","loader","FavoriteButton","setIsFavorite","myProfile","clickFavoriteIcon","amber","FolderDetailInfo","red","FolderDetail","fetchGetFolders","deleteFolder","FoldersPage","foldersList","FavoriteFolderOrderSelect","FavoriteFoldersPage","PrivateRoute","rest","location","sessionStorage","pathname","render","UnAuthRoute","getItem","ScrollToTop","MainElems","RouteComponent","footer","basename","exact","MyFolders","Folders","FavoriteFolders","LoadingScreenBody","fadeIn","keyframes","LoadingText","LoadingScreen","App","fetchDataLoader","Route","store","configureStore","reducer","authReducer","profileReducer","messageReducer","barReducer","folderReducer","postReducer","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee2dbf01.chunk.js","sourcesContent":["const apiURL = 'https://url-management-app.herokuapp.com/';\r\n// const apiURL = 'http://localhost:8000/';\r\n\r\nexport default apiURL;\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport axios, { AxiosError } from 'axios';\r\nimport {\r\n  PROPS_AUTH,\r\n  RESPONSE_AUTH,\r\n  PROPS_REGISTER,\r\n  PROPS_USER_ACTIVATE,\r\n  PROPS_RESET_PASSWORD,\r\n  PROPS_RESET_PASSWORD_CONFIRM,\r\n  AUTH_STATE,\r\n  RESPONSE_REGISTER_SUCCESS,\r\n  RESPONSE_REGISTER_FAILURE,\r\n} from './types';\r\nimport { RootState } from '../../app/store';\r\nimport apiURL from '../share';\r\n\r\nexport const fetchAsyncLogin = createAsyncThunk(\r\n  'auth/login',\r\n  async (auth: PROPS_AUTH) => {\r\n    const res = await axios.post<RESPONSE_AUTH>(\r\n      `${apiURL}auth/jwt/create/`,\r\n      auth,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    );\r\n    return res.data;\r\n  }\r\n);\r\n\r\nexport const fetchAsyncRegister = createAsyncThunk<\r\n  RESPONSE_REGISTER_SUCCESS,\r\n  PROPS_REGISTER,\r\n  { rejectValue: RESPONSE_REGISTER_FAILURE }\r\n>('auth/register', async (data: PROPS_REGISTER, { rejectWithValue }) => {\r\n  const res = await axios\r\n    .post<RESPONSE_REGISTER_SUCCESS>(`${apiURL}auth/users/`, data, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n    .then((response) => {\r\n      const res_data: RESPONSE_REGISTER_SUCCESS = response.data;\r\n      return res_data;\r\n    })\r\n    .catch((error: AxiosError<RESPONSE_REGISTER_FAILURE>) => {\r\n      if (!error.response) {\r\n        throw error;\r\n      }\r\n      return rejectWithValue(error.response.data);\r\n    });\r\n\r\n  return res;\r\n});\r\n\r\nexport const fetchAsyncUserActivate = createAsyncThunk(\r\n  'auth/user_activate',\r\n  async (data: PROPS_USER_ACTIVATE) => {\r\n    await axios.post(`${apiURL}auth/users/activation/`, data, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  }\r\n);\r\n\r\nexport const fetchAsyncResetPassword = createAsyncThunk(\r\n  'auth/reset_password',\r\n  async (data: PROPS_RESET_PASSWORD) => {\r\n    await axios.post(`${apiURL}auth/users/reset_password/`, data, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  }\r\n);\r\n\r\nexport const fetchAsyncResetPasswordConfirm = createAsyncThunk(\r\n  'auth/reset_password_confirm',\r\n  async (data: PROPS_RESET_PASSWORD_CONFIRM) => {\r\n    await axios.post(`${apiURL}auth/users/reset_password_confirm/`, data, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  }\r\n);\r\n\r\n// authSliceのinitialState\r\nconst authInitialState: AUTH_STATE = {\r\n  isAuth: false,\r\n  isUserActive: false,\r\n  isAfterRegister: false,\r\n  isAfterResetPassword: false,\r\n  isLoadingAuth: false,\r\n  errorMessages: [],\r\n};\r\n\r\nexport const authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState: authInitialState,\r\n  reducers: {\r\n    fetchCredStart(state) {\r\n      // fetchが始まったとき\r\n      state.isLoadingAuth = true;\r\n    },\r\n    fetchCredEnd(state) {\r\n      // fetchが終わったとき\r\n      state.isLoadingAuth = false;\r\n    },\r\n    setIsAuth(state) {\r\n      // ユーザーが認証済みのとき\r\n      state.isAuth = true;\r\n    },\r\n    resetIsAuth(state) {\r\n      // ユーザーが認証済みでないとき\r\n      state.isAuth = false;\r\n    },\r\n    setIsAfterRegister(state) {\r\n      // ユーザー登録が終わったとき\r\n      state.isAfterRegister = true;\r\n    },\r\n    resetIsAfterRegister(state) {\r\n      state.isAfterRegister = false;\r\n    },\r\n    setIsAfterResetPassword(state) {\r\n      // パスワード変更が終わったとき\r\n      state.isAfterResetPassword = true;\r\n    },\r\n    resetIsAfterResetPassword(state) {\r\n      state.isAfterResetPassword = false;\r\n    },\r\n    setAuthErrorMessage(state, action: PayloadAction<string>) {\r\n      state.errorMessages = [action.payload];\r\n    },\r\n    resetAuthErrorMessage(state) {\r\n      state.errorMessages = [];\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchAsyncLogin.fulfilled, (state, action) => {\r\n      localStorage.setItem('ajt', action.payload.access);\r\n      state.isAuth = true;\r\n    });\r\n    builder.addCase(fetchAsyncLogin.rejected, (state) => {\r\n      state.errorMessages = [\r\n        'メールアドレスまたはパスワードが間違っています。',\r\n      ];\r\n    });\r\n    builder.addCase(fetchAsyncRegister.fulfilled, (state) => {\r\n      state.isAfterRegister = true;\r\n    });\r\n    builder.addCase(fetchAsyncRegister.rejected, (state, action) => {\r\n      if (action.payload) {\r\n        if (action.payload.email) {\r\n          state.errorMessages = action.payload.email;\r\n        } else if (action.payload.password) {\r\n          state.errorMessages = action.payload.password;\r\n        } else if (action.payload.re_password) {\r\n          state.errorMessages = action.payload.re_password;\r\n        }\r\n      }\r\n    });\r\n    builder.addCase(fetchAsyncResetPassword.fulfilled, (state) => {\r\n      state.isAfterResetPassword = true;\r\n    });\r\n    builder.addCase(fetchAsyncResetPassword.rejected, (state) => {\r\n      state.errorMessages = ['指定したメールアドレスのユーザーが存在しません'];\r\n    });\r\n    builder.addCase(fetchAsyncResetPasswordConfirm.rejected, (state) => {\r\n      state.errorMessages = ['このURLからパスワードを変更できません'];\r\n    });\r\n    builder.addCase(fetchAsyncUserActivate.fulfilled, (state) => {\r\n      state.isUserActive = true;\r\n    });\r\n  },\r\n});\r\n\r\nexport const {\r\n  fetchCredStart,\r\n  fetchCredEnd,\r\n  setIsAuth,\r\n  resetIsAuth,\r\n  setIsAfterRegister,\r\n  resetIsAfterRegister,\r\n  setIsAfterResetPassword,\r\n  resetIsAfterResetPassword,\r\n  setAuthErrorMessage,\r\n  resetAuthErrorMessage,\r\n} = authSlice.actions;\r\n\r\nexport const selectIsAuth = (state: RootState): boolean => state.auth.isAuth;\r\nexport const selectIsUserActive = (state: RootState): boolean =>\r\n  state.auth.isUserActive;\r\nexport const selectIsLoadingAuth = (state: RootState): boolean =>\r\n  state.auth.isLoadingAuth;\r\nexport const selectIsAfterRegister = (state: RootState): boolean =>\r\n  state.auth.isAfterRegister;\r\nexport const selectIsAfterResetPassword = (state: RootState): boolean =>\r\n  state.auth.isAfterResetPassword;\r\nexport const selectAuthErrorMessage = (state: RootState): string[] =>\r\n  state.auth.errorMessages;\r\n\r\nexport default authSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { RootState } from '../../app/store';\r\nimport { MESSAGE_STATE } from './types';\r\n\r\nconst messageInitialState: MESSAGE_STATE = {\r\n  infoMessage: '',\r\n  errorMessage: '',\r\n  isExistInfoMessage: false,\r\n};\r\n\r\nconst messageSlice = createSlice({\r\n  name: 'message',\r\n  initialState: messageInitialState,\r\n  reducers: {\r\n    setInfoMessage(state, action: PayloadAction<string>) {\r\n      state.infoMessage = action.payload;\r\n    },\r\n    resetInfoMessage(state) {\r\n      state.infoMessage = '';\r\n    },\r\n    setErrorMessage(state, action: PayloadAction<string>) {\r\n      state.errorMessage = action.payload;\r\n    },\r\n    resetErrorMessage(state) {\r\n      state.errorMessage = '';\r\n    },\r\n    setIsExistInfoMessage(state) {\r\n      state.isExistInfoMessage = true;\r\n    },\r\n    resetIsExistInfoMessage(state) {\r\n      state.isExistInfoMessage = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setInfoMessage,\r\n  resetInfoMessage,\r\n  setErrorMessage,\r\n  resetErrorMessage,\r\n  setIsExistInfoMessage,\r\n  resetIsExistInfoMessage,\r\n} = messageSlice.actions;\r\n\r\nexport const selectIsExistMessage = (state: RootState): boolean =>\r\n  state.message.isExistInfoMessage;\r\nexport const selectInfoMessage = (state: RootState): string =>\r\n  state.message.infoMessage;\r\nexport const selectErrorMessage = (state: RootState): string =>\r\n  state.message.errorMessage;\r\nexport default messageSlice.reducer;\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport axios, { AxiosError } from 'axios';\r\nimport { RootState } from '../../app/store';\r\nimport apiURL from '../share';\r\n\r\nimport {\r\n  PROPS_CREATE_FOLDER,\r\n  PROPS_UPDATE_FOLDER,\r\n  PROPS_FOLDER_ID,\r\n  FOLDER,\r\n  FOLDERS,\r\n  FOLDERS_WITHOUT_FAVORITE,\r\n  RESPONSE_CREATE_FOLDER_FAILURE,\r\n  FOLDER_STATE,\r\n  PROPS_QUERY_PARAMS_GET_FOLDERS,\r\n  PROPS_QUERY_PARAMS_GET_MYFOLDERS,\r\n  RESPONSE_POST_FAVORITE,\r\n} from './types';\r\n\r\nexport const fetchAsyncGetFolder = createAsyncThunk(\r\n  'folder/get',\r\n  async (id: string, { rejectWithValue }) => {\r\n    if (typeof localStorage.ajt === 'string') {\r\n      const res = await axios.get<FOLDER>(`${apiURL}api/v1/folder/${id}/`, {\r\n        headers: {\r\n          Authorization: `JWT ${localStorage.ajt}`,\r\n        },\r\n      });\r\n      return res.data;\r\n    }\r\n    return rejectWithValue({ errorMessage: 'ログインしていません' });\r\n  }\r\n);\r\n\r\nexport const fetchAsyncGetMyFolders = createAsyncThunk(\r\n  'myfolders/get',\r\n  async (_, { rejectWithValue }) => {\r\n    if (typeof localStorage.ajt === 'string') {\r\n      const res = await axios.get<FOLDER[]>(`${apiURL}api/v1/myfolder/`, {\r\n        headers: {\r\n          Authorization: `JWT ${localStorage.ajt}`,\r\n        },\r\n      });\r\n      return res.data;\r\n    }\r\n    return rejectWithValue({ errorMessage: 'ログインしていません' });\r\n  }\r\n);\r\n// export const fetchAsyncGetMyFolders = createAsyncThunk(\r\n//   'myfolders/get',\r\n//   async (params: PROPS_QUERY_PARAMS_GET_MYFOLDERS, { rejectWithValue }) => {\r\n//     let url = `${apiURL}api/v1/myfolder/`;\r\n//     if (params.url) {\r\n//       url = params.url;\r\n//     } else {\r\n//       url += `?ordering=${params.ordering}&public=${params.public}&search=${params.search}`;\r\n//     }\r\n//     if (typeof localStorage.ajt === 'string') {\r\n//       const res = await axios.get<FOLDERS>(url, {\r\n//         headers: {\r\n//           Authorization: `JWT ${localStorage.ajt}`,\r\n//         },\r\n//       });\r\n//       return res.data;\r\n//     }\r\n//     return rejectWithValue({ errorMessage: 'ログインしていません' });\r\n//   }\r\n// );\r\n\r\nexport const fetchAsyncGetFolders = createAsyncThunk(\r\n  'folders/get',\r\n  async (params: PROPS_QUERY_PARAMS_GET_FOLDERS, { rejectWithValue }) => {\r\n    let url = `${apiURL}api/v1/folderlist/`;\r\n    if (params.url) {\r\n      url = params.url;\r\n    } else {\r\n      url += `?ordering=${params.ordering}&search=${params.search}`;\r\n    }\r\n    if (typeof localStorage.ajt === 'string') {\r\n      const res = await axios.get<FOLDERS>(url, {\r\n        headers: {\r\n          Authorization: `JWT ${localStorage.ajt}`,\r\n        },\r\n      });\r\n      return res.data;\r\n    }\r\n    return rejectWithValue({ errorMessage: 'ログインしていません' });\r\n  }\r\n);\r\n\r\nexport const fetchAsyncGetFavoriteFolders = createAsyncThunk(\r\n  'favoritefolders/get',\r\n  async (params: PROPS_QUERY_PARAMS_GET_FOLDERS, { rejectWithValue }) => {\r\n    let url = `${apiURL}api/v1/folderlist/favorite/`;\r\n    if (params.url) {\r\n      url = params.url;\r\n    } else {\r\n      url += `?ordering=${params.ordering}&search=${params.search}`;\r\n    }\r\n    if (typeof localStorage.ajt === 'string') {\r\n      const res = await axios.get<FOLDERS_WITHOUT_FAVORITE>(url, {\r\n        headers: {\r\n          Authorization: `JWT ${localStorage.ajt}`,\r\n        },\r\n      });\r\n      return res.data;\r\n    }\r\n    return rejectWithValue({ errorMessage: 'ログインしていません' });\r\n  }\r\n);\r\n\r\nexport const fetchAsyncCreateFolder = createAsyncThunk<\r\n  FOLDER,\r\n  PROPS_CREATE_FOLDER,\r\n  { rejectValue: RESPONSE_CREATE_FOLDER_FAILURE }\r\n>('folder/post', async (folder: PROPS_CREATE_FOLDER, { rejectWithValue }) => {\r\n  const data = {\r\n    name: folder.name,\r\n    public: folder.public,\r\n  };\r\n  if (typeof localStorage.ajt === 'string') {\r\n    const res = await axios\r\n      .post<FOLDER>(`${apiURL}api/v1/folder/`, data, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `JWT ${localStorage.ajt}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        const res_data: FOLDER = response.data;\r\n        return res_data;\r\n      })\r\n      .catch((error: AxiosError<RESPONSE_CREATE_FOLDER_FAILURE>) => {\r\n        if (!error.response) {\r\n          throw error;\r\n        }\r\n        return rejectWithValue(error.response.data);\r\n      });\r\n    return res;\r\n  }\r\n  return rejectWithValue({\r\n    name: [],\r\n    auth: ['ログインまたはアカウントの作成を行ってください'],\r\n    code: '',\r\n  });\r\n});\r\n// export const fetchAsyncCreateFolder = createAsyncThunk(\r\n//   'folder/post',\r\n//   async (folder: PROPS_CREATE_FOLDER, { rejectWithValue }) => {\r\n//     const data = {\r\n//       name: folder.name,\r\n//       public: folder.public,\r\n//     };\r\n//     if (typeof localStorage.ajt === 'string') {\r\n//       const res = await axios.post<FOLDER>(`${apiURL}api/v1/folder/`, data, {\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//           Authorization: `JWT ${localStorage.ajt}`,\r\n//         },\r\n//       });\r\n//       return res.data;\r\n//     }\r\n//     return rejectWithValue({ errorMessage: 'ログインしていません' });\r\n//   }\r\n// );\r\n\r\nexport const fetchAsyncUpdateFolder = createAsyncThunk<\r\n  FOLDER,\r\n  PROPS_UPDATE_FOLDER,\r\n  { rejectValue: RESPONSE_CREATE_FOLDER_FAILURE }\r\n>('folder/put', async (folder: PROPS_UPDATE_FOLDER, { rejectWithValue }) => {\r\n  const data = {\r\n    name: folder.name,\r\n    public: folder.public,\r\n  };\r\n  if (typeof localStorage.ajt === 'string') {\r\n    const res = await axios\r\n      .put<FOLDER>(`${apiURL}api/v1/folder/${folder.id}/`, data, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `JWT ${localStorage.ajt}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        const res_data: FOLDER = response.data;\r\n        return res_data;\r\n      })\r\n      .catch((error: AxiosError<RESPONSE_CREATE_FOLDER_FAILURE>) => {\r\n        if (!error.response) {\r\n          throw error;\r\n        }\r\n        return rejectWithValue(error.response.data);\r\n      });\r\n    return res;\r\n  }\r\n  return rejectWithValue({\r\n    name: [],\r\n    auth: ['ログインまたはアカウントの作成を行ってください'],\r\n    code: '',\r\n  });\r\n});\r\n\r\nexport const fetchAsyncDeleteFolder = createAsyncThunk(\r\n  'folder/delete',\r\n  async (folder: PROPS_FOLDER_ID, { rejectWithValue }) => {\r\n    if (typeof localStorage.ajt === 'string') {\r\n      await axios.delete(`${apiURL}api/v1/folder/${folder.id}/`, {\r\n        headers: {\r\n          Authorization: `JWT ${localStorage.ajt}`,\r\n        },\r\n      });\r\n      return folder.id;\r\n    }\r\n    return rejectWithValue({ errorMessage: 'ログインしていません' });\r\n  }\r\n);\r\n\r\nexport const fetchAsyncPostFavorite = createAsyncThunk(\r\n  'favorite/post',\r\n  async (id: string, { rejectWithValue }) => {\r\n    if (typeof localStorage.ajt === 'string') {\r\n      const res = await axios.post<RESPONSE_POST_FAVORITE>(\r\n        `${apiURL}api/v1/favorite/${id}/`,\r\n        {},\r\n        {\r\n          headers: {\r\n            Authorization: `JWT ${localStorage.ajt}`,\r\n          },\r\n        }\r\n      );\r\n      return res.data;\r\n    }\r\n    return rejectWithValue({ errorMessage: 'ログインしていません' });\r\n  }\r\n);\r\n\r\nconst folderInitialState: FOLDER_STATE = {\r\n  isLoadingFolder: false,\r\n  isLoadingFavorite: false,\r\n  isSetFolder: false,\r\n  hasMyFolder: true,\r\n  isExistFolders: true,\r\n  isExistFavoriteFolders: true,\r\n  openNewFolder: false,\r\n  openEditFolder: false,\r\n  openDeleteFolder: false,\r\n  numOfFavorite: 0,\r\n  errorMessages: [],\r\n  folder: {\r\n    id: '',\r\n    user: '',\r\n    name: '',\r\n    public: false,\r\n    posts_add: '',\r\n    favorite: [],\r\n  },\r\n  myfolders: [\r\n    {\r\n      id: '',\r\n      user: '',\r\n      name: '',\r\n      public: false,\r\n      posts_add: '',\r\n      favorite: [],\r\n    },\r\n  ],\r\n\r\n  // myfolders: {\r\n  //   count: 0,\r\n  //   next: null,\r\n  //   previous: null,\r\n  //   results: [\r\n  //     {\r\n  //       id: '',\r\n  //       user: '',\r\n  //       name: '',\r\n  //       public: false,\r\n  //       posts_add: '',\r\n  //       favorite: [],\r\n  //     },\r\n  //   ],\r\n  // },\r\n\r\n  // 追加\r\n  myfoldersSearchResult: [],\r\n  folders: {\r\n    count: 0,\r\n    next: null,\r\n    previous: null,\r\n    results: [\r\n      {\r\n        id: '',\r\n        user: '',\r\n        name: '',\r\n        public: false,\r\n        posts_add: '',\r\n        favorite: [],\r\n      },\r\n    ],\r\n  },\r\n  favoritefolders: {\r\n    count: 0,\r\n    next: null,\r\n    previous: null,\r\n    results: [\r\n      {\r\n        folder: {\r\n          id: '',\r\n          user: '',\r\n          name: '',\r\n          public: false,\r\n          posts_add: '',\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\ninterface PROPS_SET_FOLDER {\r\n  id: string;\r\n  user: string;\r\n  name: string;\r\n  public: boolean;\r\n  posts_add: string;\r\n  favorite: string[];\r\n}\r\n\r\nconst folderSlice = createSlice({\r\n  name: 'folder',\r\n  initialState: folderInitialState,\r\n  reducers: {\r\n    fetchFolderStart(state) {\r\n      state.isLoadingFolder = true;\r\n    },\r\n    fetchFolderEnd(state) {\r\n      state.isLoadingFolder = false;\r\n    },\r\n    fetchFavoriteStart(state) {\r\n      state.isLoadingFavorite = true;\r\n    },\r\n    fetchFavoriteEnd(state) {\r\n      state.isLoadingFavorite = false;\r\n    },\r\n    setIsSetFolder(state) {\r\n      state.isSetFolder = true;\r\n    },\r\n    resetIsSetFolder(state) {\r\n      state.isSetFolder = false;\r\n    },\r\n    setIsExistFolders(state) {\r\n      state.isExistFolders = true;\r\n    },\r\n    resetIsExistFolders(state) {\r\n      state.isExistFolders = false;\r\n    },\r\n    setIsExistFavoriteFolders(state) {\r\n      state.isExistFavoriteFolders = true;\r\n    },\r\n    resetIsExistFavoriteFolders(state) {\r\n      state.isExistFavoriteFolders = false;\r\n    },\r\n    setHasMyFolder(state) {\r\n      state.hasMyFolder = true;\r\n    },\r\n    resetHasMyFolder(state) {\r\n      state.hasMyFolder = false;\r\n    },\r\n    setOpenNewFolder(state) {\r\n      state.openNewFolder = true;\r\n    },\r\n    resetOpenNewFolder(state) {\r\n      state.openNewFolder = false;\r\n    },\r\n    setOpenEditFolder(state) {\r\n      state.openEditFolder = true;\r\n    },\r\n    resetOpenEditFolder(state) {\r\n      state.openEditFolder = false;\r\n    },\r\n    setOpenDeleteFolder(state) {\r\n      state.openDeleteFolder = true;\r\n    },\r\n    resetOpenDeleteFolder(state) {\r\n      state.openDeleteFolder = false;\r\n    },\r\n    resetMyFoldersCount(state) {\r\n      state.myfolders = [];\r\n      // 追加\r\n      state.myfoldersSearchResult = [];\r\n    },\r\n    // resetMyFoldersCount(state) {\r\n    //   state.myfolders.count = 0;\r\n    // },\r\n    resetFoldersCount(state) {\r\n      state.folders.count = 0;\r\n    },\r\n    resetFavoriteFoldersCount(state) {\r\n      state.favoritefolders.count = 0;\r\n    },\r\n    setFolderErrorMessage(state, action: PayloadAction<string>) {\r\n      state.errorMessages = [action.payload];\r\n    },\r\n    resetFolderErrorMessage(state) {\r\n      state.errorMessages = [];\r\n    },\r\n    setFolder(state, action: PayloadAction<PROPS_SET_FOLDER>) {\r\n      state.folder = {\r\n        id: action.payload.id,\r\n        user: action.payload.user,\r\n        name: action.payload.name,\r\n        public: action.payload.public,\r\n        posts_add: action.payload.posts_add,\r\n        favorite: action.payload.favorite,\r\n      };\r\n    },\r\n    searchMyFolders(\r\n      state,\r\n      action: PayloadAction<PROPS_QUERY_PARAMS_GET_MYFOLDERS>\r\n    ) {\r\n      const folders = state.myfolders.concat();\r\n      let folders_sort = folders;\r\n      if (action.payload.ordering === 'posts_add') {\r\n        folders_sort = folders.reverse();\r\n      }\r\n\r\n      state.myfoldersSearchResult = folders_sort.filter((folder) => {\r\n        if (folder.name.includes(action.payload.search)) {\r\n          if (action.payload.public === '') {\r\n            return true;\r\n          }\r\n          if (String(folder.public) === action.payload.public) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      });\r\n      if (state.myfoldersSearchResult.length === 0) {\r\n        state.hasMyFolder = false;\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchAsyncGetFolder.fulfilled, (state, action) => {\r\n      state.folder = action.payload;\r\n    });\r\n    builder.addCase(fetchAsyncGetFolders.fulfilled, (state, action) => {\r\n      if (state.folders.count === 0) {\r\n        state.folders = action.payload;\r\n      } else {\r\n        state.folders.results = state.folders.results.concat(\r\n          action.payload.results\r\n        );\r\n        state.folders.next = action.payload.next;\r\n        state.folders.previous = action.payload.previous;\r\n      }\r\n      if (action.payload.count === 0) {\r\n        state.isExistFolders = false;\r\n      }\r\n    });\r\n    builder.addCase(fetchAsyncGetMyFolders.fulfilled, (state, action) => {\r\n      state.myfolders = action.payload;\r\n      state.myfoldersSearchResult = action.payload;\r\n      if (action.payload.length === 0) {\r\n        state.hasMyFolder = false;\r\n      }\r\n      let favoriteNum = 0;\r\n      state.myfolders.forEach((folder) => {\r\n        favoriteNum += folder.favorite.length;\r\n      });\r\n      state.numOfFavorite = favoriteNum;\r\n    });\r\n    // builder.addCase(fetchAsyncGetMyFolders.fulfilled, (state, action) => {\r\n    //   if (state.myfolders.count === 0) {\r\n    //     state.myfolders = action.payload;\r\n    //   } else {\r\n    //     state.myfolders.results = state.myfolders.results.concat(\r\n    //       action.payload.results\r\n    //     );\r\n    //     state.myfolders.next = action.payload.next;\r\n    //     state.myfolders.previous = action.payload.previous;\r\n    //   }\r\n    //   if (action.payload.count === 0) {\r\n    //     state.hasMyFolder = false;\r\n    //   }\r\n    // });\r\n    builder.addCase(fetchAsyncGetFavoriteFolders.fulfilled, (state, action) => {\r\n      if (state.favoritefolders.count === 0) {\r\n        state.favoritefolders = action.payload;\r\n      } else {\r\n        state.favoritefolders.results = state.favoritefolders.results.concat(\r\n          action.payload.results\r\n        );\r\n        state.favoritefolders.next = action.payload.next;\r\n        state.favoritefolders.previous = action.payload.previous;\r\n      }\r\n      if (action.payload.count === 0) {\r\n        state.isExistFavoriteFolders = false;\r\n      }\r\n    });\r\n    builder.addCase(fetchAsyncCreateFolder.fulfilled, (state, action) => {\r\n      state.myfolders.unshift(action.payload);\r\n      state.myfoldersSearchResult = state.myfolders;\r\n      state.hasMyFolder = true;\r\n    });\r\n    builder.addCase(fetchAsyncCreateFolder.rejected, (state, action) => {\r\n      if (action.payload) {\r\n        if (action.payload.name) {\r\n          state.errorMessages = action.payload.name;\r\n        }\r\n      }\r\n    });\r\n    // builder.addCase(fetchAsyncCreateFolder.fulfilled, (state, action) => {\r\n    //   state.myfolders.results.unshift(action.payload);\r\n    // });\r\n    builder.addCase(fetchAsyncUpdateFolder.fulfilled, (state, action) => {\r\n      state.folder = action.payload;\r\n      state.myfolders = state.myfolders.map((folder) =>\r\n        folder.id === action.payload.id ? action.payload : folder\r\n      );\r\n      state.myfoldersSearchResult = state.myfolders;\r\n    });\r\n    builder.addCase(fetchAsyncUpdateFolder.rejected, (state, action) => {\r\n      if (action.payload) {\r\n        if (action.payload.name) {\r\n          state.errorMessages = action.payload.name;\r\n        }\r\n      }\r\n    });\r\n    // builder.addCase(fetchAsyncUpdateFolder.fulfilled, (state, action) => {\r\n    //   state.folder = action.payload;\r\n    //   state.myfolders.results = state.myfolders.results.map((folder) =>\r\n    //     folder.id === action.payload.id ? action.payload : folder\r\n    //   );\r\n    // });\r\n    builder.addCase(fetchAsyncDeleteFolder.fulfilled, (state, action) => {\r\n      state.myfolders = state.myfolders.filter(\r\n        (folder) => folder.id !== action.payload\r\n      );\r\n      state.folders.results = state.folders.results.filter(\r\n        (folder) => folder.id !== action.payload\r\n      );\r\n      state.favoritefolders.results = state.favoritefolders.results.filter(\r\n        (result) => result.folder.id !== action.payload\r\n      );\r\n      state.myfoldersSearchResult = state.myfolders;\r\n      if (state.myfolders.length === 0) {\r\n        state.hasMyFolder = false;\r\n      }\r\n    });\r\n    // builder.addCase(fetchAsyncDeleteFolder.fulfilled, (state, action) => {\r\n    //   state.myfolders.results = state.myfolders.results.filter(\r\n    //     (folder) => folder.id !== action.payload\r\n    //   );\r\n    // });\r\n    builder.addCase(fetchAsyncPostFavorite.fulfilled, (state, action) => {\r\n      const currentfolder = state.folder;\r\n      const folderWithoutFavorite = {\r\n        folder: {\r\n          id: currentfolder.id,\r\n          user: currentfolder.user,\r\n          name: currentfolder.name,\r\n          public: currentfolder.public,\r\n          posts_add: currentfolder.posts_add,\r\n        },\r\n      };\r\n      if (state.favoritefolders.count !== 0) {\r\n        if (action.payload.isFavorite) {\r\n          state.favoritefolders.count += 1;\r\n          state.favoritefolders.results.unshift(folderWithoutFavorite);\r\n        } else {\r\n          state.favoritefolders.count -= 1;\r\n          state.favoritefolders.results = state.favoritefolders.results.filter(\r\n            (result) => result.folder.id !== currentfolder.id\r\n          );\r\n        }\r\n      }\r\n    });\r\n  },\r\n});\r\n\r\nexport const {\r\n  fetchFolderStart,\r\n  fetchFolderEnd,\r\n  fetchFavoriteStart,\r\n  fetchFavoriteEnd,\r\n  resetIsSetFolder,\r\n  resetFoldersCount,\r\n  resetMyFoldersCount,\r\n  resetFavoriteFoldersCount,\r\n  setIsExistFolders,\r\n  resetIsExistFolders,\r\n  setIsExistFavoriteFolders,\r\n  resetIsExistFavoriteFolders,\r\n  setFolderErrorMessage,\r\n  resetFolderErrorMessage,\r\n  setHasMyFolder,\r\n  resetHasMyFolder,\r\n  setOpenNewFolder,\r\n  resetOpenNewFolder,\r\n  setOpenEditFolder,\r\n  resetOpenEditFolder,\r\n  setOpenDeleteFolder,\r\n  resetOpenDeleteFolder,\r\n  setFolder,\r\n  searchMyFolders,\r\n} = folderSlice.actions;\r\n\r\nexport const selectIsLoadingFolder = (state: RootState): boolean =>\r\n  state.folder.isLoadingFolder;\r\nexport const selectHasMyFolder = (state: RootState): boolean =>\r\n  state.folder.hasMyFolder;\r\nexport const selectIsExistFolders = (state: RootState): boolean =>\r\n  state.folder.isExistFolders;\r\nexport const selectIsExistFavoriteFolders = (state: RootState): boolean =>\r\n  state.folder.isExistFavoriteFolders;\r\nexport const selectIsLoadingFavorite = (state: RootState): boolean =>\r\n  state.folder.isLoadingFavorite;\r\nexport const selectIsSetFolder = (state: RootState): boolean =>\r\n  state.folder.isSetFolder;\r\nexport const selectNumOfFavorite = (state: RootState): number =>\r\n  state.folder.numOfFavorite;\r\nexport const selectFolderErrorMessages = (state: RootState): string[] =>\r\n  state.folder.errorMessages;\r\nexport const selectMyFolders = (state: RootState): FOLDER[] =>\r\n  state.folder.myfolders;\r\n// 追加\r\nexport const selectMyFoldersSearchResult = (state: RootState): FOLDER[] =>\r\n  state.folder.myfoldersSearchResult;\r\n// export const selectMyFolders = (state: RootState): FOLDERS =>\r\n//   state.folder.myfolders;\r\nexport const selectFolders = (state: RootState): FOLDERS =>\r\n  state.folder.folders;\r\nexport const selectFavoriteFolders = (\r\n  state: RootState\r\n): FOLDERS_WITHOUT_FAVORITE => state.folder.favoritefolders;\r\nexport const selectOpenDeleteFolder = (state: RootState): boolean =>\r\n  state.folder.openDeleteFolder;\r\nexport const selectOpenNewFolder = (state: RootState): boolean =>\r\n  state.folder.openNewFolder;\r\nexport const selectOpenEditFolder = (state: RootState): boolean =>\r\n  state.folder.openEditFolder;\r\n\r\nexport const selectFolder = (state: RootState): FOLDER => state.folder.folder;\r\n\r\nexport default folderSlice.reducer;\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport axios, { AxiosError } from 'axios';\r\nimport { RootState } from '../../app/store';\r\nimport apiURL from '../share';\r\n\r\nimport {\r\n  PROPS_PROFILE,\r\n  PROPS_NICKNAME,\r\n  PROFILE,\r\n  PROFILE_STATE,\r\n  RESPONSE_UPDATE_PROFILE_FAILURE,\r\n} from './types';\r\n\r\nexport const fetchAsyncGetMyProf = createAsyncThunk(\r\n  'myprofile/get',\r\n  async (_, { rejectWithValue }) => {\r\n    if (typeof localStorage.ajt === 'string') {\r\n      const res = await axios.get<PROFILE[]>(`${apiURL}api/v1/myprofile/`, {\r\n        headers: {\r\n          Authorization: `JWT ${localStorage.ajt}`,\r\n        },\r\n      });\r\n      return res.data[0];\r\n    }\r\n    return rejectWithValue({\r\n      code: 'token_not_exist',\r\n    });\r\n  }\r\n);\r\n\r\nexport const fetchAsyncGetProfs = createAsyncThunk(\r\n  'profiles/get',\r\n  async (_, { rejectWithValue }) => {\r\n    if (typeof localStorage.ajt === 'string') {\r\n      const res = await axios.get<PROFILE[]>(`${apiURL}api/v1/profile/`, {\r\n        headers: {\r\n          Authorization: `JWT ${localStorage.ajt}`,\r\n        },\r\n      });\r\n      return res.data;\r\n    }\r\n    return rejectWithValue({\r\n      errorMessage: 'ログインまたはアカウントの作成を行ってください',\r\n    });\r\n  }\r\n);\r\n\r\nexport const fetchAsyncCreateProf = createAsyncThunk(\r\n  'profile/post',\r\n  async (profile: PROPS_NICKNAME, { rejectWithValue }) => {\r\n    const data = {\r\n      nickname: profile.nickname,\r\n    };\r\n    if (typeof localStorage.ajt === 'string') {\r\n      const res = await axios.post<PROFILE>(`${apiURL}api/v1/profile/`, data, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `JWT ${localStorage.ajt}`,\r\n        },\r\n      });\r\n      return res.data;\r\n    }\r\n    return rejectWithValue({\r\n      errorMessage: 'ログインまたはアカウントの作成を行ってください',\r\n    });\r\n  }\r\n);\r\n\r\nexport const fetchAsyncUpdateProf = createAsyncThunk<\r\n  PROFILE,\r\n  PROPS_PROFILE,\r\n  { rejectValue: RESPONSE_UPDATE_PROFILE_FAILURE }\r\n>('profile/put', async (profile: PROPS_PROFILE, { rejectWithValue }) => {\r\n  const data = {\r\n    nickname: profile.nickname,\r\n  };\r\n  if (typeof localStorage.ajt === 'string') {\r\n    const res = await axios\r\n      .put<PROFILE>(`${apiURL}api/v1/profile/${profile.id}/`, data, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `JWT ${localStorage.ajt}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        const res_data: PROFILE = response.data;\r\n        return res_data;\r\n      })\r\n      .catch((error: AxiosError<RESPONSE_UPDATE_PROFILE_FAILURE>) => {\r\n        if (!error.response) {\r\n          throw error;\r\n        }\r\n        return rejectWithValue(error.response.data);\r\n      });\r\n    return res;\r\n  }\r\n  return rejectWithValue({\r\n    nickname: [],\r\n    auth: ['ログインまたはアカウントの作成を行ってください'],\r\n    code: '',\r\n  });\r\n});\r\n// export const fetchAsyncUpdateProf = createAsyncThunk(\r\n//   'profile/put',\r\n//   async (profile: PROPS_PROFILE, { rejectWithValue }) => {\r\n//     const data = {\r\n//       nickname: profile.nickname,\r\n//     };\r\n//     if (typeof localStorage.ajt === 'string') {\r\n//       const res = await axios.put<PROFILE>(\r\n//         `${apiURL}api/v1/profile/${profile.id}/`,\r\n//         data,\r\n//         {\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//             Authorization: `JWT ${localStorage.ajt}`,\r\n//           },\r\n//         }\r\n//       );\r\n//       return res.data;\r\n//     }\r\n//     return rejectWithValue({ errorMessage: 'ログインしていません' });\r\n//   }\r\n// );\r\n\r\nconst profileInitialState: PROFILE_STATE = {\r\n  isLoadingProf: false,\r\n  openProfile: false,\r\n  errorMessages: [],\r\n  myprofile: {\r\n    id: 0,\r\n    user: '',\r\n    nickname: '',\r\n    created_on: '',\r\n  },\r\n  profiles: [\r\n    {\r\n      id: 0,\r\n      user: '',\r\n      nickname: '',\r\n      created_on: '',\r\n    },\r\n  ],\r\n};\r\n\r\nconst profileSlice = createSlice({\r\n  name: 'profile',\r\n  initialState: profileInitialState,\r\n  reducers: {\r\n    fetchProfStart(state) {\r\n      // fetchが始まったとき\r\n      state.isLoadingProf = true;\r\n    },\r\n    fetchProfEnd(state) {\r\n      // fetchが終わったとき\r\n      state.isLoadingProf = false;\r\n    },\r\n    setOpenProfile(state) {\r\n      state.openProfile = true;\r\n    },\r\n    resetOpenProfile(state) {\r\n      state.openProfile = false;\r\n    },\r\n    setProfileErrorMessage(state, action: PayloadAction<string>) {\r\n      state.errorMessages = [action.payload];\r\n    },\r\n    resetProfileErrorMessage(state) {\r\n      state.errorMessages = [];\r\n    },\r\n    editNickname(state, action: PayloadAction<string>) {\r\n      state.myprofile.nickname = action.payload;\r\n    },\r\n    resetProfile(state) {\r\n      state.myprofile = profileInitialState.myprofile;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchAsyncGetMyProf.fulfilled, (state, action) => {\r\n      state.myprofile = action.payload;\r\n    });\r\n    builder.addCase(fetchAsyncGetProfs.fulfilled, (state, action) => {\r\n      state.profiles = action.payload;\r\n    });\r\n    builder.addCase(fetchAsyncCreateProf.fulfilled, (state, action) => {\r\n      state.myprofile = action.payload;\r\n    });\r\n    builder.addCase(fetchAsyncUpdateProf.fulfilled, (state, action) => {\r\n      state.myprofile = action.payload;\r\n      state.profiles = state.profiles.map((prof) =>\r\n        prof.id === action.payload.id ? action.payload : prof\r\n      );\r\n    });\r\n    builder.addCase(fetchAsyncUpdateProf.rejected, (state, action) => {\r\n      if (action.payload) {\r\n        if (action.payload.nickname) {\r\n          state.errorMessages = action.payload.nickname;\r\n        }\r\n      }\r\n    });\r\n  },\r\n});\r\n\r\nexport const {\r\n  fetchProfStart,\r\n  fetchProfEnd,\r\n  setOpenProfile,\r\n  resetOpenProfile,\r\n  setProfileErrorMessage,\r\n  resetProfileErrorMessage,\r\n  editNickname,\r\n  resetProfile,\r\n} = profileSlice.actions;\r\n\r\nexport const selectIsLoadingProf = (state: RootState): boolean =>\r\n  state.profile.isLoadingProf;\r\nexport const selectOpenProfile = (state: RootState): boolean =>\r\n  state.profile.openProfile;\r\nexport const selectProfileErrorMessages = (state: RootState): string[] =>\r\n  state.profile.errorMessages;\r\nexport const selectMyProfile = (state: RootState): PROFILE =>\r\n  state.profile.myprofile;\r\nexport const selectProfiles = (state: RootState): PROFILE[] =>\r\n  state.profile.profiles;\r\n\r\nexport default profileSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { RootState } from '../../app/store';\r\nimport { BAR_STATE } from './types';\r\n\r\nconst barInitialState: BAR_STATE = {\r\n  activeIndex: 0,\r\n};\r\n\r\nconst barSlice = createSlice({\r\n  name: 'bar',\r\n  initialState: barInitialState,\r\n  reducers: {\r\n    setActiveIndex(state, action: PayloadAction<number>) {\r\n      state.activeIndex = action.payload;\r\n    },\r\n    resetActiveIndex(state) {\r\n      state.activeIndex = 0;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setActiveIndex, resetActiveIndex } = barSlice.actions;\r\n\r\nexport const selectActiveIndex = (state: RootState): number =>\r\n  state.bar.activeIndex;\r\n\r\nexport default barSlice.reducer;\r\n","import { AiFillHome, AiOutlineGlobal, AiFillStar } from 'react-icons/ai';\r\n\r\nimport { CgProfile } from 'react-icons/cg';\r\n\r\nexport const SidebarData = [\r\n  {\r\n    title: 'MyFolder',\r\n    path: '/',\r\n    icon: <AiFillHome />,\r\n  },\r\n  {\r\n    title: 'MyPage',\r\n    path: '/mypage',\r\n    icon: <CgProfile />,\r\n  },\r\n  {\r\n    title: 'Global',\r\n    path: '/folder',\r\n    icon: <AiOutlineGlobal />,\r\n  },\r\n  {\r\n    title: 'Favorite',\r\n    path: '/folder/favorite',\r\n    icon: <AiFillStar />,\r\n  },\r\n];\r\n\r\nexport const BarDataIndex = {\r\n  myfolder: 0,\r\n  mypage: 1,\r\n  global: 2,\r\n  favorite: 3,\r\n};\r\n","import { VFC, MouseEvent } from 'react';\r\n\r\nimport { Button } from '@mui/material';\r\n\r\nconst AuthButton: VFC<{\r\n  clickFunc: (e: MouseEvent<HTMLElement>) => void;\r\n  ButtonText: string;\r\n}> = ({ clickFunc, ButtonText }) => (\r\n  <Button variant=\"contained\" onClick={clickFunc}>\r\n    {ButtonText}\r\n  </Button>\r\n);\r\n\r\nexport default AuthButton;\r\n","import styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport { CgProfile } from 'react-icons/cg';\r\nimport AuthButton from '../../../atoms/Buttons/AuthButton';\r\n\r\nconst bgColor = '#fdfdfd';\r\nconst borderColor = '#f9f9f9';\r\nconst iconColor = '#79BD9A';\r\nconst iconColorHover = '#00ff00';\r\nconst txColor = '#79BD9A';\r\nconst mainColor = '#00ff00';\r\n\r\nexport const NavBarWrapper = styled.div`\r\n  background-color: ${bgColor};\r\n  height: 60px;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 200;\r\n  border-bottom: 4px solid ${borderColor};\r\n  box-shadow: 0px 0px 3px 0px;\r\n`;\r\n\r\nexport const TopBarLeftItems = styled.div`\r\n  display: flex;\r\n  line-height: 60px;\r\n`;\r\n\r\nexport const MenuBars = styled.div`\r\n  margin-left: 15px;\r\n  margin-top: 10px;\r\n  font-size: 2rem;\r\n  background: none;\r\n  cursor: pointer;\r\n  z-index: 100;\r\n  & svg {\r\n    transition: 0.3s;\r\n  }\r\n  &:hover {\r\n    & svg {\r\n      color: ${mainColor} !important;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const AppLogo = styled(Link)`\r\n  color: ${iconColor};\r\n  margin-left: 20%;\r\n  font-size: 20px;\r\n  margin-top: 7px;\r\n  text-decoration: none;\r\n  transition: 0.3s;\r\n\r\n  &:hover {\r\n    color: ${iconColorHover};\r\n  }\r\n`;\r\n\r\nexport const TopBarRightItems = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  width: 500px;\r\n  margin-right: 30px;\r\n  @media only screen and (max-width: 767px) {\r\n    width: 200px;\r\n    margin-right: 15px;\r\n  }\r\n`;\r\n\r\nexport const TopBarProfile = styled(Link)`\r\n  color: ${txColor};\r\n  font-size: 12px;\r\n  text-align: right;\r\n  margin-right: 40px;\r\n  width: 300px;\r\n  line-height: 36px;\r\n  transition: 0.3s;\r\n\r\n  &:hover {\r\n    color: ${mainColor} !important;\r\n  }\r\n\r\n  @media only screen and (max-width: 767px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nexport const TopBarProfileIconLink = styled(Link)`\r\n  display: inline-block;\r\n  padding-top: 5px;\r\n  margin-right: 20px;\r\n\r\n  @media screen and (min-width: 767px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nexport const ProfileIcon = styled(CgProfile)`\r\n  width: 25px;\r\n  height: 25px;\r\n  color: ${iconColor} !important;\r\n  transition: 0.3s;\r\n  &:hover {\r\n    color: ${mainColor} !important;\r\n  }\r\n`;\r\n\r\nexport const SignInLink = styled(Link)`\r\n  color: ${txColor};\r\n  font-size: 15px;\r\n  line-height: 36px;\r\n  transition: 0.3s;\r\n  text-align: right;\r\n  margin-right: 40px;\r\n\r\n  &:hover {\r\n    color: ${mainColor} !important;\r\n  }\r\n  @media only screen and (max-width: 767px) {\r\n    margin-right: 20px;\r\n  }\r\n`;\r\n\r\nexport const Button = styled(AuthButton)`\r\n  line-height: 36px;\r\n`;\r\n// #060b26\r\nexport const NavMenu = styled.nav`\r\n  background-color: ${bgColor};\r\n  border-right: 4px solid ${borderColor};\r\n  box-shadow: 0px 2px 10px;\r\n  width: 250px;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  position: fixed;\r\n  top: 0;\r\n  left: -100%;\r\n  transition: 850ms;\r\n  z-index: 2000;\r\n  &.active {\r\n    left: 0;\r\n    transition: 350ms;\r\n  }\r\n`;\r\n\r\nexport const NavMenuItems = styled.ul`\r\n  width: 100%;\r\n`;\r\n\r\nexport const NavBarToggle = styled.li`\r\n  background-color: ${bgColor};\r\n  width: 100%;\r\n  padding-top: 10px;\r\n  height: 60px;\r\n  display: flex;\r\n  justify-content: start;\r\n  align-items: center;\r\n`;\r\n\r\nexport const NavText = styled.li`\r\n  display: flex;\r\n  justify-content: start;\r\n  align-items: center;\r\n  padding: 8px 0px 8px 16px;\r\n  list-style: none;\r\n  height: 60px;\r\n`;\r\n\r\nexport const NavLink = styled(Link)`\r\n  text-decoration: none;\r\n  color: ${txColor};\r\n  font-size: 18px;\r\n  width: 95%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0 16px;\r\n  border-radius: 4px;\r\n  transition: 0.2s;\r\n\r\n  &:hover {\r\n    background-color: ${mainColor};\r\n    color: ${bgColor};\r\n  }\r\n\r\n  &.active {\r\n    background-color: ${mainColor};\r\n    color: ${bgColor};\r\n  }\r\n  & span {\r\n    padding-left: 10px;\r\n  }\r\n`;\r\n","import styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\n\r\nexport const AuthBtn = styled.button`\r\n  appearance: none;\r\n  border: none;\r\n  border-radius: 5px;\r\n  display: block;\r\n  position: relative;\r\n  width: 100px;\r\n  padding: 0.6em;\r\n  text-align: center;\r\n  color: #fff;\r\n  background: #79bd9a;\r\n  transition: 0.3s;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    background: #00ff00;\r\n  }\r\n`;\r\n\r\nexport const SubmitBtn = styled(LoadingButton)`\r\n  appearance: none;\r\n  border: 1px solid #fff !important;\r\n  background: rgba(121, 189, 154) !important;\r\n  color: #fff !important;\r\n  transition: 0.3s;\r\n\r\n  &.Mui-disabled {\r\n    background: #dfdfdf !important;\r\n  }\r\n\r\n  &:hover {\r\n    background: #00ff00 !important;\r\n  }\r\n`;\r\n\r\nexport const AuthFormBtn = styled(LoadingButton)`\r\n  appearance: none;\r\n  border: 1px solid #fff !important;\r\n  background: rgba(121, 189, 154) !important;\r\n  color: #fff !important;\r\n  transition: 0.3s;\r\n\r\n  display: block !important;\r\n  width: 90%;\r\n  margin: 10px auto !important;\r\n\r\n  &.Mui-disabled {\r\n    background: #dfdfdf !important;\r\n  }\r\n\r\n  &:hover {\r\n    background: #00ff00 !important;\r\n  }\r\n`;\r\n\r\nexport const SearchBtn = styled(SubmitBtn)`\r\n  width: 100%;\r\n  margin: 30px 0 20px !important;\r\n`;\r\n\r\nexport const OpenModalBtn = styled.button`\r\n  appearance: none;\r\n  border: none;\r\n  border-radius: 5px;\r\n  display: block;\r\n  position: relative;\r\n  width: 70px;\r\n  padding: 0.6em;\r\n  text-align: center;\r\n  color: #fff;\r\n  background: #79bd9a;\r\n  transition: 0.3s;\r\n  height: 40px;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    background: #00ff00;\r\n  }\r\n`;\r\n\r\nexport const OpenEditProfileBtn = styled.button`\r\n  appearance: none;\r\n  border: none;\r\n  border-radius: 5px;\r\n  display: block;\r\n  position: relative;\r\n  width: 100%;\r\n  padding: 0.6em;\r\n  text-align: center;\r\n  color: #fff;\r\n  background: #79bd9a;\r\n  transition: 0.3s;\r\n  height: 50px;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    background: #00ff00;\r\n  }\r\n`;\r\n\r\nexport const TopLinkBtn = styled(Link)`\r\n  text-decoration: none;\r\n  color: #79bd9a;\r\n  transition: 0.3s;\r\n  padding-top: 10px;\r\n  &:hover {\r\n    color: #00ff00;\r\n  }\r\n`;\r\n","import { VFC, MouseEvent } from 'react';\r\n\r\nimport { AuthBtn } from './ButtonDesign';\r\n\r\nconst AuthButton: VFC<{\r\n  clickFunc: (e: MouseEvent<HTMLElement>) => void;\r\n  ButtonText: string;\r\n}> = ({ clickFunc, ButtonText }) => (\r\n  <AuthBtn onClick={clickFunc}>{ButtonText}</AuthBtn>\r\n);\r\n\r\nexport default AuthButton;\r\n","import { VFC, useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { IconContext } from 'react-icons';\r\nimport { FaBars } from 'react-icons/fa';\r\nimport { AiOutlineClose } from 'react-icons/ai';\r\n\r\nimport { AppDispatch } from '../../../../stores/app/store';\r\n\r\nimport {\r\n  selectIsAuth,\r\n  resetIsAuth,\r\n  setAuthErrorMessage,\r\n} from '../../../../stores/slices/auth/authSlice';\r\n\r\nimport {\r\n  setInfoMessage,\r\n  setIsExistInfoMessage,\r\n} from '../../../../stores/slices/message/messageSlice';\r\n\r\nimport {\r\n  resetIsSetFolder,\r\n  fetchFolderStart,\r\n  fetchFolderEnd,\r\n  fetchAsyncGetMyFolders,\r\n} from '../../../../stores/slices/folder/folderSlice';\r\n\r\nimport {\r\n  fetchProfStart,\r\n  fetchProfEnd,\r\n  fetchAsyncGetMyProf,\r\n  selectMyProfile,\r\n} from '../../../../stores/slices/profile/profileSlice';\r\n\r\nimport {\r\n  setActiveIndex,\r\n  selectActiveIndex,\r\n} from '../../../../stores/slices/bar/barSlice';\r\n\r\nimport { SidebarData, BarDataIndex } from '../SidebarData';\r\nimport {\r\n  NavBarWrapper,\r\n  TopBarLeftItems,\r\n  MenuBars,\r\n  AppLogo,\r\n  TopBarRightItems,\r\n  TopBarProfile,\r\n  TopBarProfileIconLink,\r\n  SignInLink,\r\n  NavMenu,\r\n  NavMenuItems,\r\n  NavBarToggle,\r\n  NavText,\r\n  NavLink,\r\n  ProfileIcon,\r\n} from './NavbarElements';\r\n\r\nimport AuthButton from '../../../atoms/Buttons/AuthButtonSub';\r\n\r\nconst Navbar: VFC = () => {\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const isAuth = useSelector(selectIsAuth);\r\n  const activeIndex = useSelector(selectActiveIndex);\r\n  const profile = useSelector(selectMyProfile);\r\n  const history = useHistory();\r\n  const [sidebar, setSidebar] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    const getMyProf = async () => {\r\n      dispatch(fetchProfStart());\r\n      const result = await dispatch(fetchAsyncGetMyProf());\r\n      if (fetchAsyncGetMyProf.rejected.match(result)) {\r\n        dispatch(\r\n          setAuthErrorMessage(\r\n            'アクセストークンの有効期限が切れています。再ログインしてください'\r\n          )\r\n        );\r\n        dispatch(resetIsAuth());\r\n        dispatch(fetchProfEnd());\r\n        return;\r\n      }\r\n      if (fetchAsyncGetMyProf.fulfilled.match(result)) {\r\n        dispatch(fetchFolderStart());\r\n        await dispatch(fetchAsyncGetMyFolders());\r\n        dispatch(fetchFolderEnd());\r\n      }\r\n      dispatch(fetchProfEnd());\r\n    };\r\n    if (isAuth) {\r\n      if (!profile.user) {\r\n        getMyProf().catch((e) => {\r\n          console.log(e);\r\n        });\r\n      }\r\n    }\r\n  }, [dispatch, isAuth, profile.user]);\r\n\r\n  const showSidebar = () => setSidebar(!sidebar);\r\n\r\n  return (\r\n    <>\r\n      <IconContext.Provider value={{ color: '#79BD9A' }}>\r\n        <NavBarWrapper>\r\n          <TopBarLeftItems>\r\n            {isAuth && (\r\n              <MenuBars>\r\n                <FaBars onClick={showSidebar} />\r\n              </MenuBars>\r\n            )}\r\n\r\n            <AppLogo to=\"/\">URLer</AppLogo>\r\n          </TopBarLeftItems>\r\n          {isAuth ? (\r\n            <TopBarRightItems>\r\n              <TopBarProfile\r\n                to=\"/mypage\"\r\n                onClick={() => dispatch(setActiveIndex(BarDataIndex.mypage))}\r\n              >\r\n                {profile.nickname}\r\n              </TopBarProfile>\r\n              <TopBarProfileIconLink\r\n                to=\"/mypage\"\r\n                onClick={() => dispatch(setActiveIndex(BarDataIndex.mypage))}\r\n              >\r\n                <ProfileIcon />\r\n              </TopBarProfileIconLink>\r\n              <AuthButton\r\n                clickFunc={() => {\r\n                  localStorage.removeItem('ajt');\r\n                  dispatch(resetIsSetFolder());\r\n                  // dispatch(resetMyFoldersCount());\r\n                  // dispatch(resetFoldersCount());\r\n                  dispatch(setInfoMessage('ログアウトしました'));\r\n                  dispatch(setIsExistInfoMessage());\r\n                  dispatch(resetIsAuth());\r\n                }}\r\n                ButtonText=\"ログアウト\"\r\n              />\r\n            </TopBarRightItems>\r\n          ) : (\r\n            <TopBarRightItems>\r\n              <SignInLink to=\"/signup\">新規登録</SignInLink>\r\n              <AuthButton\r\n                clickFunc={() => {\r\n                  history.push('/login');\r\n                }}\r\n                ButtonText=\"ログイン\"\r\n              />\r\n            </TopBarRightItems>\r\n          )}\r\n          {isAuth && (\r\n            <NavMenu className={sidebar ? 'active' : ''}>\r\n              <NavMenuItems>\r\n                <NavBarToggle>\r\n                  <MenuBars>\r\n                    <AiOutlineClose onClick={showSidebar} />\r\n                  </MenuBars>\r\n                </NavBarToggle>\r\n                {SidebarData.map((item, index) => (\r\n                  <NavText key={item.path}>\r\n                    <NavLink\r\n                      to={item.path}\r\n                      onClick={() => {\r\n                        showSidebar();\r\n                        dispatch(setActiveIndex(index));\r\n                      }}\r\n                      className={index === activeIndex ? 'active' : ''}\r\n                    >\r\n                      {item.icon}\r\n                      <span>{item.title}</span>\r\n                    </NavLink>\r\n                  </NavText>\r\n                ))}\r\n              </NavMenuItems>\r\n            </NavMenu>\r\n          )}\r\n        </NavBarWrapper>\r\n      </IconContext.Provider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst bgColor = '#fdfdfd';\r\nconst borderColor = '#f9f9f9';\r\nconst mainColor = '#00ff00';\r\n\r\nexport const SideMenu = styled.div`\r\n  background-color: ${bgColor};\r\n  border-right: 4px solid ${borderColor};\r\n  box-shadow: 0px 1px 3px;\r\n  width: 50px;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  @media only screen and (max-width: 767px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nexport const SideMenuItem = styled.li`\r\n  display: flex;\r\n  justify-content: start;\r\n  align-items: center;\r\n  padding: 8px 0px 8px 4px;\r\n  list-style: none;\r\n  height: 60px;\r\n`;\r\n\r\nexport const MenuItemLink = styled(Link)`\r\n  text-decoration: none;\r\n  color: #f5f5f5;\r\n  font-size: 18px;\r\n  width: 95%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  border-radius: 4px;\r\n  transition: 0.3s;\r\n  padding: 0 10px;\r\n  &:hover {\r\n    background-color: ${mainColor};\r\n    & svg {\r\n      color: ${bgColor} !important;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const MenuItemLinkActive = styled(MenuItemLink)`\r\n  background-color: ${mainColor};\r\n  & svg {\r\n    color: ${bgColor} !important;\r\n  }\r\n`;\r\n\r\nexport const SideMenuItems = styled.ul`\r\n  width: 100%;\r\n  &:first-child {\r\n    padding-top: 100px;\r\n  }\r\n`;\r\n","import { VFC } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { IconContext } from 'react-icons';\r\n\r\nimport { AppDispatch } from '../../../../stores/app/store';\r\n\r\nimport { selectIsAuth } from '../../../../stores/slices/auth/authSlice';\r\n\r\nimport {\r\n  setActiveIndex,\r\n  selectActiveIndex,\r\n} from '../../../../stores/slices/bar/barSlice';\r\n\r\nimport { SidebarData } from '../SidebarData';\r\nimport {\r\n  SideMenu,\r\n  SideMenuItem,\r\n  SideMenuItems,\r\n  MenuItemLink,\r\n  MenuItemLinkActive,\r\n} from './SidebarElements';\r\n\r\nconst Sidebar: VFC = () => {\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const activeIndex = useSelector(selectActiveIndex);\r\n  const isAuth = useSelector(selectIsAuth);\r\n\r\n  return (\r\n    <>\r\n      <IconContext.Provider value={{ color: '#A8DBA8' }}>\r\n        {isAuth && (\r\n          <SideMenu>\r\n            <SideMenuItems>\r\n              {SidebarData.map((item, index) => (\r\n                <SideMenuItem key={item.path}>\r\n                  {index === activeIndex ? (\r\n                    <MenuItemLinkActive to={item.path}>\r\n                      {item.icon}\r\n                    </MenuItemLinkActive>\r\n                  ) : (\r\n                    <MenuItemLink\r\n                      to={item.path}\r\n                      onClick={() => dispatch(setActiveIndex(index))}\r\n                    >\r\n                      {item.icon}\r\n                    </MenuItemLink>\r\n                  )}\r\n                </SideMenuItem>\r\n              ))}\r\n            </SideMenuItems>\r\n          </SideMenu>\r\n        )}\r\n      </IconContext.Provider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import { VFC, SyntheticEvent, MouseEvent } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { Snackbar, IconButton } from '@mui/material';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nimport { AppDispatch } from '../../../stores/app/store';\r\n\r\nimport {\r\n  selectInfoMessage,\r\n  selectIsExistMessage,\r\n  resetIsExistInfoMessage,\r\n  resetInfoMessage,\r\n} from '../../../stores/slices/message/messageSlice';\r\n\r\nconst InfoAlert: VFC = () => {\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const isExistMessage = useSelector(selectIsExistMessage);\r\n  const infoMessage = useSelector(selectInfoMessage);\r\n\r\n  const handleClose = (event: SyntheticEvent | MouseEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    dispatch(resetInfoMessage());\r\n    dispatch(resetIsExistInfoMessage());\r\n  };\r\n\r\n  const action = (\r\n    <>\r\n      <IconButton\r\n        size=\"small\"\r\n        aria-label=\"close\"\r\n        color=\"inherit\"\r\n        onClick={handleClose}\r\n      >\r\n        <CloseIcon fontSize=\"small\" />\r\n      </IconButton>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Snackbar\r\n        open={isExistMessage}\r\n        autoHideDuration={2000}\r\n        onClose={handleClose}\r\n        message={infoMessage}\r\n        action={action}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InfoAlert;\r\n","import styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { TextField } from '@mui/material';\r\n\r\nexport const TxField = styled(TextField)`\r\n  display: block !important;\r\n  width: 90%;\r\n  margin: 15px auto !important;\r\n\r\n  & div {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const SwitchWrapper = styled.div`\r\n  width: 90%;\r\n  margin: 30px auto 10px !important;\r\n`;\r\n\r\nexport const SwitchLabel = styled.label`\r\n  font-size: 15px;\r\n  color: #636363;\r\n`;\r\n\r\nexport const SwitchSelect = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nexport const SwitchSelectText = styled.p`\r\n  font-size: 13px;\r\n  padding: 12px 0px;\r\n  color: #9f9f9f;\r\n\r\n  &.active {\r\n    color: #1976d2;\r\n  }\r\n`;\r\n\r\nexport const SwitchPublic = styled(TextField)``;\r\n\r\nexport const ErrorMessage = styled.p`\r\n  width: 90%;\r\n  margin: 0 auto;\r\n  color: red;\r\n  font-size: 13px;\r\n`;\r\n\r\nexport const BottomActions = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  border-top: 1px solid #79bd9a;\r\n  padding: 10px 20px;\r\n`;\r\n\r\nexport const CancelButton = styled.button`\r\n  background-color: transparent;\r\n  border: none;\r\n  cursor: pointer;\r\n  outline: none;\r\n  padding: 0;\r\n  appearance: none;\r\n  color: #79bd9a;\r\n  margin-right: 20px;\r\n  transition: 0.3s;\r\n\r\n  &:hover {\r\n    color: #00ff00;\r\n  }\r\n`;\r\n\r\nexport const AuthFormWrapper = styled.div`\r\n  width: 98%;\r\n  max-width: 500px;\r\n  margin: 30px auto;\r\n  background: #fff;\r\n  border-radius: 10px;\r\n  box-shadow: 3px 3px 10px #6d6d6d;\r\n  padding: 60px 40px 30px;\r\n`;\r\n\r\nexport const AuthFormHeading = styled.h3`\r\n  margin-left: 20px;\r\n`;\r\n\r\nexport const AuthFormInfo = styled.p`\r\n  margin-left: 20px;\r\n  font-size: 15px;\r\n  @media only screen and (max-width: 767px) {\r\n    font-size: 13px;\r\n  }\r\n`;\r\n\r\nexport const LoaderWrapper = styled.div`\r\n  width: 100px;\r\n  margin: 10px auto;\r\n  text-align: center;\r\n`;\r\n\r\nexport const AuthFormBottomLinkWrapper = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nexport const AuthFormBottomLink = styled(Link)`\r\n  color: #79bd9a;\r\n  display: block;\r\n  margin: 5px 0;\r\n  transition: 0.3s;\r\n\r\n  &:hover {\r\n    color: #00ff00;\r\n  }\r\n`;\r\n\r\nexport const AuthFormText = styled.p`\r\n  margin-bottom: 20px;\r\n`;\r\n","import { VFC } from 'react';\r\n\r\nimport { AuthFormBtn } from './ButtonDesign';\r\n\r\nconst AuthFormButton: VFC<{\r\n  isLoading: boolean;\r\n  disabled: boolean;\r\n  ButtonText: string;\r\n}> = ({ isLoading, disabled, ButtonText }) => (\r\n  <AuthFormBtn\r\n    loading={isLoading}\r\n    disabled={disabled}\r\n    variant=\"outlined\"\r\n    type=\"submit\"\r\n  >\r\n    {ButtonText}\r\n  </AuthFormBtn>\r\n);\r\n\r\nexport default AuthFormButton;\r\n","import { VFC } from 'react';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nconst Loading: VFC = () => (\r\n  <Loader type=\"Oval\" color=\"#79BD9A\" height={50} width={50} />\r\n);\r\n\r\nexport default Loading;\r\n","import styled from 'styled-components';\r\n\r\nexport const ErrorAlertWrapper = styled.div`\r\n  margin: 0px auto 30px;\r\n  width: 98%;\r\n`;\r\n\r\nexport const InfoAlertWrapper = styled.div``;\r\n","import { VFC } from 'react';\r\n\r\nimport Alert from '@mui/material/Alert';\r\n\r\nimport { ErrorAlertWrapper } from './AlertElements';\r\n\r\nconst ErrorAlert: VFC<{ text: string }> = ({ text }) => (\r\n  <ErrorAlertWrapper>\r\n    <Alert severity=\"error\">{text}</Alert>\r\n  </ErrorAlertWrapper>\r\n);\r\n\r\nexport default ErrorAlert;\r\n","import { VFC } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport { AppDispatch } from '../../../stores/app/store';\r\n\r\nimport {\r\n  fetchCredStart,\r\n  fetchCredEnd,\r\n  selectIsLoadingAuth,\r\n  fetchAsyncLogin,\r\n  selectAuthErrorMessage,\r\n  resetAuthErrorMessage,\r\n} from '../../../stores/slices/auth/authSlice';\r\n\r\nimport {\r\n  setInfoMessage,\r\n  setIsExistInfoMessage,\r\n} from '../../../stores/slices/message/messageSlice';\r\n\r\nimport {\r\n  AuthFormWrapper,\r\n  AuthFormHeading,\r\n  TxField,\r\n  ErrorMessage,\r\n  LoaderWrapper,\r\n  AuthFormBottomLink,\r\n  AuthFormBottomLinkWrapper,\r\n} from '../../atoms/Form/FormElements';\r\n\r\nimport AuthFormButton from '../../atoms/Buttons/AuthFormButton';\r\nimport Loading from '../../atoms/Loader';\r\nimport ErrorAlert from '../../atoms/Alert/ErrorAlert';\r\n\r\nexport interface LOCATION_FROM_PROPS {\r\n  from: string;\r\n}\r\n\r\nconst LoginPage: VFC = () => {\r\n  const isLoadingAuth = useSelector(selectIsLoadingAuth);\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { state } = useLocation<LOCATION_FROM_PROPS>();\r\n  const authErrorMessages = useSelector(selectAuthErrorMessage);\r\n  return (\r\n    <Formik\r\n      initialErrors={{ email: 'required' }}\r\n      initialValues={{ email: '', password: '' }}\r\n      onSubmit={async (values) => {\r\n        dispatch(fetchCredStart());\r\n        const result = await dispatch(fetchAsyncLogin(values));\r\n\r\n        if (fetchAsyncLogin.fulfilled.match(result)) {\r\n          dispatch(resetAuthErrorMessage());\r\n          dispatch(setInfoMessage('ログインしました'));\r\n          dispatch(setIsExistInfoMessage());\r\n          history.replace(state.from ?? '/');\r\n        }\r\n        dispatch(fetchCredEnd());\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        email: Yup.string()\r\n          .email('メールアドレスの形式が違います')\r\n          .required('メールアドレスを入力してください'),\r\n        password: Yup.string().required('パスワードを入力してください'),\r\n      })}\r\n    >\r\n      {({\r\n        handleSubmit,\r\n        handleChange,\r\n        handleBlur,\r\n        values,\r\n        errors,\r\n        touched,\r\n        isValid,\r\n      }) => (\r\n        <AuthFormWrapper>\r\n          {authErrorMessages.map((message) => (\r\n            <ErrorAlert text={message} key={message} />\r\n          ))}\r\n          <form onSubmit={handleSubmit}>\r\n            <div>\r\n              <AuthFormHeading>ログイン</AuthFormHeading>\r\n              <br />\r\n\r\n              <LoaderWrapper>{isLoadingAuth && <Loading />}</LoaderWrapper>\r\n              <TxField\r\n                id=\"standard-basic\"\r\n                variant=\"standard\"\r\n                placeholder=\"メールアドレス\"\r\n                type=\"input\"\r\n                name=\"email\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.email}\r\n              />\r\n              {touched.email && errors.email ? (\r\n                <ErrorMessage>{errors.email}</ErrorMessage>\r\n              ) : null}\r\n              <TxField\r\n                id=\"standard-basic\"\r\n                variant=\"standard\"\r\n                placeholder=\"パスワード\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.password}\r\n              />\r\n              {touched.password && errors.password ? (\r\n                <ErrorMessage>{errors.password}</ErrorMessage>\r\n              ) : null}\r\n              <br />\r\n\r\n              <AuthFormButton\r\n                isLoading={isLoadingAuth}\r\n                disabled={!isValid}\r\n                ButtonText=\"ログイン\"\r\n              />\r\n              <br />\r\n              <AuthFormBottomLinkWrapper>\r\n                <AuthFormBottomLink to=\"/password/reset\">\r\n                  パスワードを忘れた場合\r\n                </AuthFormBottomLink>\r\n                <br />\r\n                <AuthFormBottomLink to=\"/signup\">\r\n                  新規登録はこちら\r\n                </AuthFormBottomLink>\r\n              </AuthFormBottomLinkWrapper>\r\n            </div>\r\n          </form>\r\n        </AuthFormWrapper>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import { VFC } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport { AppDispatch } from '../../../../stores/app/store';\r\n\r\nimport {\r\n  fetchCredStart,\r\n  fetchCredEnd,\r\n  selectIsLoadingAuth,\r\n  fetchAsyncRegister,\r\n  selectAuthErrorMessage,\r\n  resetAuthErrorMessage,\r\n} from '../../../../stores/slices/auth/authSlice';\r\n\r\nimport {\r\n  AuthFormWrapper,\r\n  AuthFormHeading,\r\n  TxField,\r\n  ErrorMessage,\r\n  LoaderWrapper,\r\n  AuthFormBottomLink,\r\n  AuthFormBottomLinkWrapper,\r\n} from '../../../atoms/Form/FormElements';\r\nimport AuthFormButton from '../../../atoms/Buttons/AuthFormButton';\r\nimport Loading from '../../../atoms/Loader';\r\nimport ErrorAlert from '../../../atoms/Alert/ErrorAlert';\r\n\r\nconst SignUpPage: VFC = () => {\r\n  const isLoadingAuth = useSelector(selectIsLoadingAuth);\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const history = useHistory();\r\n  const authErrorMessages = useSelector(selectAuthErrorMessage);\r\n  return (\r\n    <Formik\r\n      initialErrors={{ email: 'required' }}\r\n      initialValues={{ email: '', password: '', re_password: '' }}\r\n      onSubmit={async (values) => {\r\n        dispatch(fetchCredStart());\r\n        dispatch(resetAuthErrorMessage());\r\n        const resultReg = await dispatch(fetchAsyncRegister(values));\r\n\r\n        if (fetchAsyncRegister.fulfilled.match(resultReg)) {\r\n          dispatch(resetAuthErrorMessage());\r\n          history.replace('/signup/after');\r\n        }\r\n        dispatch(fetchCredEnd());\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        email: Yup.string()\r\n          .email('メールアドレスの形式が違います')\r\n          .required('メールアドレスを入力してください'),\r\n        password: Yup.string()\r\n          .required('パスワードを入力してください')\r\n          .min(8, 'パスワードは9文字以上で設定してください'),\r\n        re_password: Yup.string()\r\n          .required('確認用のパスワードを入力してください')\r\n          .oneOf([Yup.ref('password'), null], 'パスワードが一致しません')\r\n          .min(8, 'パスワードは9文字以上で設定してください'),\r\n      })}\r\n    >\r\n      {({\r\n        handleSubmit,\r\n        handleChange,\r\n        handleBlur,\r\n        values,\r\n        errors,\r\n        touched,\r\n        isValid,\r\n      }) => (\r\n        <AuthFormWrapper>\r\n          {authErrorMessages.map((message) => (\r\n            <ErrorAlert text={message} />\r\n          ))}\r\n          <form onSubmit={handleSubmit}>\r\n            <div>\r\n              <AuthFormHeading>新規登録</AuthFormHeading>\r\n              <br />\r\n              <LoaderWrapper>{isLoadingAuth && <Loading />}</LoaderWrapper>\r\n              <TxField\r\n                id=\"standard-basic\"\r\n                variant=\"standard\"\r\n                placeholder=\"メールアドレス\"\r\n                type=\"input\"\r\n                name=\"email\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.email}\r\n              />\r\n              {touched.email && errors.email ? (\r\n                <ErrorMessage>{errors.email}</ErrorMessage>\r\n              ) : null}\r\n              <TxField\r\n                id=\"standard-basic\"\r\n                variant=\"standard\"\r\n                placeholder=\"パスワード\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.password}\r\n              />\r\n              {touched.password && errors.password ? (\r\n                <ErrorMessage>{errors.password}</ErrorMessage>\r\n              ) : null}\r\n              <TxField\r\n                id=\"standard-basic\"\r\n                variant=\"standard\"\r\n                placeholder=\"パスワード(確認用)\"\r\n                type=\"password\"\r\n                name=\"re_password\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.re_password}\r\n              />\r\n              {touched.re_password && errors.re_password ? (\r\n                <ErrorMessage>{errors.re_password}</ErrorMessage>\r\n              ) : null}\r\n              <br />\r\n\r\n              <AuthFormButton\r\n                isLoading={isLoadingAuth}\r\n                disabled={!isValid}\r\n                ButtonText=\"新規登録\"\r\n              />\r\n              <br />\r\n              <AuthFormBottomLinkWrapper>\r\n                <AuthFormBottomLink to=\"/login\">\r\n                  登録済みの方はこちら\r\n                </AuthFormBottomLink>\r\n              </AuthFormBottomLinkWrapper>\r\n            </div>\r\n          </form>\r\n        </AuthFormWrapper>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default SignUpPage;\r\n","import { VFC, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { selectIsAfterRegister } from '../../../../stores/slices/auth/authSlice';\r\n\r\nimport {\r\n  AuthFormWrapper,\r\n  AuthFormBottomLink,\r\n  AuthFormBottomLinkWrapper,\r\n  AuthFormText,\r\n} from '../../../atoms/Form/FormElements';\r\n\r\nconst SignUpAfterPage: VFC = () => {\r\n  const isAfterRegister = useSelector(selectIsAfterRegister);\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    if (!isAfterRegister) {\r\n      history.replace('/');\r\n    }\r\n  }, [history, isAfterRegister]);\r\n  return (\r\n    <AuthFormWrapper>\r\n      <AuthFormText>メールを送信しました</AuthFormText>\r\n\r\n      <AuthFormText>\r\n        メールに添付されたURLを開き、アカウントの有効化を行ってください。\r\n      </AuthFormText>\r\n      <AuthFormBottomLinkWrapper>\r\n        <AuthFormBottomLink to=\"/login\">ログイン画面に戻る</AuthFormBottomLink>\r\n      </AuthFormBottomLinkWrapper>\r\n    </AuthFormWrapper>\r\n  );\r\n};\r\n\r\nexport default SignUpAfterPage;\r\n","import { VFC, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport { AppDispatch } from '../../../../stores/app/store';\r\n\r\nimport {\r\n  fetchCredStart,\r\n  fetchCredEnd,\r\n  selectIsLoadingAuth,\r\n  selectIsUserActive,\r\n  fetchAsyncUserActivate,\r\n} from '../../../../stores/slices/auth/authSlice';\r\n\r\nimport {\r\n  AuthFormWrapper,\r\n  AuthFormBottomLinkWrapper,\r\n  AuthFormBottomLink,\r\n  AuthFormText,\r\n} from '../../../atoms/Form/FormElements';\r\n\r\nimport Loading from '../../../atoms/Loader';\r\n\r\ninterface URLParams {\r\n  uid: string;\r\n  token: string;\r\n}\r\n\r\nconst UserActivePage: VFC = () => {\r\n  const isLoadingAuth = useSelector(selectIsLoadingAuth);\r\n  const isUserActive = useSelector(selectIsUserActive);\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const { uid } = useParams<URLParams>();\r\n  const { token } = useParams<URLParams>();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCredStart());\r\n    const userActivate = async () => {\r\n      const data = {\r\n        uid,\r\n        token,\r\n      };\r\n      const resultReg = await dispatch(fetchAsyncUserActivate(data));\r\n      if (fetchAsyncUserActivate.rejected.match(resultReg)) {\r\n        history.replace('/');\r\n      }\r\n    };\r\n    if (!isUserActive) {\r\n      userActivate().catch((e) => console.log(e));\r\n    }\r\n    dispatch(fetchCredEnd());\r\n  }, [dispatch, token, uid, history, isUserActive]);\r\n  return (\r\n    <AuthFormWrapper>\r\n      {isLoadingAuth ? (\r\n        <Loading />\r\n      ) : (\r\n        <>\r\n          <AuthFormText>アカウントを有効にしました</AuthFormText>{' '}\r\n          <AuthFormBottomLinkWrapper>\r\n            <AuthFormBottomLink to=\"/login\">\r\n              ログイン画面に戻る\r\n            </AuthFormBottomLink>\r\n          </AuthFormBottomLinkWrapper>\r\n        </>\r\n      )}\r\n    </AuthFormWrapper>\r\n  );\r\n};\r\n\r\nexport default UserActivePage;\r\n","import { VFC } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport { AppDispatch } from '../../../../stores/app/store';\r\n\r\nimport {\r\n  AuthFormWrapper,\r\n  AuthFormHeading,\r\n  AuthFormInfo,\r\n  TxField,\r\n  ErrorMessage,\r\n  LoaderWrapper,\r\n  AuthFormBottomLink,\r\n  AuthFormBottomLinkWrapper,\r\n} from '../../../atoms/Form/FormElements';\r\n\r\nimport AuthFormButton from '../../../atoms/Buttons/AuthFormButton';\r\nimport Loading from '../../../atoms/Loader';\r\nimport ErrorAlert from '../../../atoms/Alert/ErrorAlert';\r\n\r\nimport {\r\n  fetchCredStart,\r\n  fetchCredEnd,\r\n  selectIsLoadingAuth,\r\n  fetchAsyncResetPassword,\r\n  selectAuthErrorMessage,\r\n  resetAuthErrorMessage,\r\n} from '../../../../stores/slices/auth/authSlice';\r\n\r\nconst ResetPasswordPage: VFC = () => {\r\n  const isLoadingAuth = useSelector(selectIsLoadingAuth);\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const history = useHistory();\r\n  const authErrorMessages = useSelector(selectAuthErrorMessage);\r\n  return (\r\n    <Formik\r\n      initialErrors={{ email: 'required' }}\r\n      initialValues={{ email: '' }}\r\n      onSubmit={async (values) => {\r\n        dispatch(fetchCredStart());\r\n        const result = await dispatch(fetchAsyncResetPassword(values));\r\n\r\n        if (fetchAsyncResetPassword.fulfilled.match(result)) {\r\n          dispatch(resetAuthErrorMessage());\r\n          history.replace('/password/reset/after');\r\n        }\r\n        dispatch(fetchCredEnd());\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        email: Yup.string()\r\n          .email('メールアドレスの形式が違います')\r\n          .required('メールアドレスを入力してください'),\r\n      })}\r\n    >\r\n      {({\r\n        handleSubmit,\r\n        handleChange,\r\n        handleBlur,\r\n        values,\r\n        errors,\r\n        touched,\r\n        isValid,\r\n      }) => (\r\n        <AuthFormWrapper>\r\n          {authErrorMessages.map((message) => (\r\n            <ErrorAlert text={message} key={message} />\r\n          ))}\r\n          <form onSubmit={handleSubmit}>\r\n            <div>\r\n              <AuthFormHeading>パスワードリセット</AuthFormHeading>\r\n              <br />\r\n              <AuthFormInfo>\r\n                登録したメールアドレスを入力し、送信ボタンをクリックしてください。\r\n                <br />\r\n                パスワードのリセット手順をメールで送信します。\r\n              </AuthFormInfo>\r\n              <br />\r\n              <LoaderWrapper>{isLoadingAuth && <Loading />}</LoaderWrapper>\r\n              <TxField\r\n                id=\"standard-basic\"\r\n                variant=\"standard\"\r\n                placeholder=\"email\"\r\n                type=\"input\"\r\n                name=\"email\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.email}\r\n              />\r\n              {touched.email && errors.email ? (\r\n                <ErrorMessage>{errors.email}</ErrorMessage>\r\n              ) : null}\r\n              <br />\r\n              <AuthFormButton\r\n                isLoading={isLoadingAuth}\r\n                disabled={!isValid}\r\n                ButtonText=\"送信\"\r\n              />\r\n              <br />\r\n              <AuthFormBottomLinkWrapper>\r\n                <AuthFormBottomLink to=\"/login\">\r\n                  ログインページ\r\n                </AuthFormBottomLink>\r\n              </AuthFormBottomLinkWrapper>\r\n              <br />\r\n            </div>\r\n          </form>\r\n        </AuthFormWrapper>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default ResetPasswordPage;\r\n","import { VFC, useEffect } from 'react';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { selectIsAfterResetPassword } from '../../../../stores/slices/auth/authSlice';\r\n\r\nconst ResetPasswordAfterPage: VFC = () => {\r\n  const isAfterResetPassword = useSelector(selectIsAfterResetPassword);\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    if (!isAfterResetPassword) {\r\n      history.push('/');\r\n    }\r\n  });\r\n  return (\r\n    <div>\r\n      <p>メールを送信しました</p>\r\n      <br />\r\n      <p>\r\n        メールに添付されたURLを開き、そのページからパスワードを変更してください\r\n      </p>\r\n      <Link to=\"/login\">ログイン画面に戻る</Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetPasswordAfterPage;\r\n","import { VFC } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport { AppDispatch } from '../../../../stores/app/store';\r\n\r\nimport {\r\n  fetchCredStart,\r\n  fetchCredEnd,\r\n  selectIsLoadingAuth,\r\n  fetchAsyncResetPasswordConfirm,\r\n  selectAuthErrorMessage,\r\n  resetAuthErrorMessage,\r\n} from '../../../../stores/slices/auth/authSlice';\r\n\r\nimport {\r\n  AuthFormWrapper,\r\n  AuthFormHeading,\r\n  AuthFormInfo,\r\n  TxField,\r\n  ErrorMessage,\r\n  LoaderWrapper,\r\n} from '../../../atoms/Form/FormElements';\r\nimport AuthFormButton from '../../../atoms/Buttons/AuthFormButton';\r\nimport Loading from '../../../atoms/Loader';\r\nimport ErrorAlert from '../../../atoms/Alert/ErrorAlert';\r\n\r\ninterface URLParams {\r\n  uid: string;\r\n  token: string;\r\n}\r\n\r\nconst ResetPasswordCofirmPage: VFC = () => {\r\n  const isLoadingAuth = useSelector(selectIsLoadingAuth);\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const history = useHistory();\r\n  const authErrorMessages = useSelector(selectAuthErrorMessage);\r\n  const { uid } = useParams<URLParams>();\r\n  const { token } = useParams<URLParams>();\r\n  return (\r\n    <Formik\r\n      initialErrors={{ new_password: 'required' }}\r\n      initialValues={{ uid, token, new_password: '', re_new_password: '' }}\r\n      onSubmit={async (values) => {\r\n        dispatch(fetchCredStart());\r\n        const resultReg = await dispatch(\r\n          fetchAsyncResetPasswordConfirm(values)\r\n        );\r\n\r\n        if (fetchAsyncResetPasswordConfirm.fulfilled.match(resultReg)) {\r\n          dispatch(resetAuthErrorMessage());\r\n          history.replace('/login');\r\n        }\r\n        dispatch(fetchCredEnd());\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        new_password: Yup.string()\r\n          .required('パスワードを入力してください')\r\n          .min(8, 'パスワードは8文字以上で設定してください'),\r\n        re_new_password: Yup.string()\r\n          .required('確認用のパスワードを入力してください')\r\n          .oneOf([Yup.ref('new_password'), null], 'パスワードが一致しません')\r\n          .min(8, 'パスワードは8文字以上で設定してください'),\r\n      })}\r\n    >\r\n      {({\r\n        handleSubmit,\r\n        handleChange,\r\n        handleBlur,\r\n        values,\r\n        errors,\r\n        touched,\r\n        isValid,\r\n      }) => (\r\n        <AuthFormWrapper>\r\n          {authErrorMessages.map((message) => (\r\n            <ErrorAlert text={message} key={message} />\r\n          ))}\r\n          <form onSubmit={handleSubmit}>\r\n            <div>\r\n              <AuthFormHeading>パスワードリセット</AuthFormHeading>\r\n              <br />\r\n              <AuthFormInfo>新しいパスワードを入力してください。</AuthFormInfo>\r\n              <br />\r\n              <LoaderWrapper>{isLoadingAuth && <Loading />}</LoaderWrapper>\r\n              <TxField\r\n                id=\"standard-basic\"\r\n                variant=\"standard\"\r\n                placeholder=\"パスワード\"\r\n                type=\"password\"\r\n                name=\"new_password\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.new_password}\r\n              />\r\n              {touched.new_password && errors.new_password ? (\r\n                <ErrorMessage>{errors.new_password}</ErrorMessage>\r\n              ) : null}\r\n              <TxField\r\n                id=\"standard-basic\"\r\n                variant=\"standard\"\r\n                placeholder=\"パスワード(確認用)\"\r\n                type=\"password\"\r\n                name=\"re_new_password\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.re_new_password}\r\n              />\r\n              {touched.re_new_password && errors.re_new_password ? (\r\n                <ErrorMessage>{errors.re_new_password}</ErrorMessage>\r\n              ) : null}\r\n              <br />\r\n              <AuthFormButton\r\n                isLoading={isLoadingAuth}\r\n                disabled={!isValid}\r\n                ButtonText=\"更新\"\r\n              />\r\n            </div>\r\n          </form>\r\n        </AuthFormWrapper>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default ResetPasswordCofirmPage;\r\n","import { VFC } from 'react';\r\n\r\nimport HomeIcon from '@mui/icons-material/Home';\r\n\r\nimport { TopLinkBtn } from './ButtonDesign';\r\n\r\nconst TopLinkButton: VFC = () => (\r\n  <TopLinkBtn to=\"/\">\r\n    <HomeIcon />\r\n  </TopLinkBtn>\r\n);\r\n\r\nexport default TopLinkButton;\r\n","import styled from 'styled-components';\r\n\r\nimport { Box } from '@material-ui/core';\r\n\r\nconst ModalBox = styled(Box)`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 90%;\r\n  max-width: 500px;\r\n  transform: translate(-50%, -50%);\r\n  border: 1px solid #79bd9a;\r\n  background-color: #fff;\r\n  padding-top: 20px;\r\n`;\r\n\r\nexport default ModalBox;\r\n","import { VFC, ReactElement } from 'react';\r\n\r\nimport { Modal } from '@material-ui/core';\r\nimport { Backdrop, Fade } from '@mui/material';\r\n\r\nimport ModalBox from './ModalElements';\r\n\r\nconst ModalWrapper: VFC<{\r\n  isOpen: boolean;\r\n  closeFunc: () => void;\r\n  children: ReactElement;\r\n}> = ({ isOpen, closeFunc, children }) => (\r\n  <Modal\r\n    open={isOpen}\r\n    keepMounted\r\n    onClose={closeFunc}\r\n    aria-labelledby=\"modal-modal-title\"\r\n    aria-describedby=\"modal-modal-description\"\r\n    closeAfterTransition\r\n    BackdropComponent={Backdrop}\r\n    BackdropProps={{\r\n      timeout: 500,\r\n    }}\r\n  >\r\n    <Fade in={isOpen}>\r\n      <ModalBox>{children}</ModalBox>\r\n    </Fade>\r\n  </Modal>\r\n);\r\n\r\nexport default ModalWrapper;\r\n","import { VFC } from 'react';\r\n\r\nimport { SubmitBtn } from './ButtonDesign';\r\n\r\nconst SubmitButton: VFC<{\r\n  isLoading: boolean;\r\n  disabled: boolean;\r\n  ButtonText: string;\r\n  clickFunc: () => void;\r\n}> = ({ isLoading, disabled, ButtonText, clickFunc }) => (\r\n  <SubmitBtn\r\n    loading={isLoading}\r\n    disabled={disabled}\r\n    variant=\"outlined\"\r\n    type=\"button\"\r\n    onClick={clickFunc}\r\n  >\r\n    {ButtonText}\r\n  </SubmitBtn>\r\n);\r\n\r\nexport default SubmitButton;\r\n","import { VFC } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport { AppDispatch } from '../../../stores/app/store';\r\n\r\nimport {\r\n  resetIsAuth,\r\n  setAuthErrorMessage,\r\n} from '../../../stores/slices/auth/authSlice';\r\n\r\nimport {\r\n  selectIsLoadingProf,\r\n  selectMyProfile,\r\n  selectOpenProfile,\r\n  resetOpenProfile,\r\n  fetchAsyncUpdateProf,\r\n  editNickname,\r\n  selectProfileErrorMessages,\r\n  resetProfileErrorMessage,\r\n} from '../../../stores/slices/profile/profileSlice';\r\n\r\nimport {\r\n  TxField,\r\n  ErrorMessage,\r\n  BottomActions,\r\n  CancelButton,\r\n} from '../../atoms/Form/FormElements';\r\n\r\nimport {\r\n  setInfoMessage,\r\n  setIsExistInfoMessage,\r\n} from '../../../stores/slices/message/messageSlice';\r\n\r\nimport ModalWrapper from '../../atoms/Modal/ModalWrapper';\r\nimport SubmitButton from '../../atoms/Buttons/SubmitButton';\r\nimport ErrorAlert from '../../atoms/Alert/ErrorAlert';\r\n\r\nconst EditProfile: VFC = () => {\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const isLoadingProf = useSelector(selectIsLoadingProf);\r\n  const openProfile = useSelector(selectOpenProfile);\r\n  const profile = useSelector(selectMyProfile);\r\n  const profileErrorMessages = useSelector(selectProfileErrorMessages);\r\n\r\n  return (\r\n    <>\r\n      <ModalWrapper\r\n        isOpen={openProfile}\r\n        closeFunc={() => dispatch(resetOpenProfile())}\r\n      >\r\n        <Formik\r\n          initialErrors={{ nickname: 'required' }}\r\n          initialValues={{ id: profile.id, nickname: profile.nickname }}\r\n          onSubmit={async (values) => {\r\n            dispatch(editNickname(values.nickname));\r\n            const result = await dispatch(fetchAsyncUpdateProf(values));\r\n            if (fetchAsyncUpdateProf.rejected.match(result)) {\r\n              if (result.payload) {\r\n                if (result.payload.code === 'token_not_valid') {\r\n                  dispatch(\r\n                    setAuthErrorMessage(\r\n                      'アクセストークンの有効期限が切れました。再ログインしてください'\r\n                    )\r\n                  );\r\n                  dispatch(resetIsAuth());\r\n                }\r\n              }\r\n            }\r\n            if (fetchAsyncUpdateProf.fulfilled.match(result)) {\r\n              dispatch(resetProfileErrorMessage());\r\n              dispatch(setInfoMessage('プロフィールを更新しました'));\r\n              dispatch(setIsExistInfoMessage());\r\n            }\r\n\r\n            dispatch(resetOpenProfile());\r\n          }}\r\n          validationSchema={Yup.object().shape({\r\n            nickname: Yup.string()\r\n              .required('ニックネームを入力してください')\r\n              .max(20, '20文字以下で設定してください'),\r\n          })}\r\n        >\r\n          {({\r\n            handleSubmit,\r\n            handleChange,\r\n            handleBlur,\r\n            values,\r\n            errors,\r\n            touched,\r\n            isValid,\r\n          }) => (\r\n            <>\r\n              {profileErrorMessages.map((message) => (\r\n                <ErrorAlert text={message} key={message} />\r\n              ))}\r\n              <form\r\n                onSubmit={(e) => {\r\n                  e.preventDefault();\r\n                }}\r\n              >\r\n                <TxField\r\n                  id=\"standard-basic\"\r\n                  variant=\"standard\"\r\n                  label=\"nickname\"\r\n                  name=\"nickname\"\r\n                  type=\"input\"\r\n                  value={values.nickname}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                />\r\n                {touched.nickname && errors.nickname ? (\r\n                  <ErrorMessage>{errors.nickname}</ErrorMessage>\r\n                ) : null}\r\n                <br />\r\n                <BottomActions>\r\n                  <CancelButton\r\n                    type=\"button\"\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      dispatch(resetOpenProfile());\r\n                    }}\r\n                  >\r\n                    キャンセル\r\n                  </CancelButton>\r\n                  <SubmitButton\r\n                    isLoading={isLoadingProf}\r\n                    disabled={!isValid}\r\n                    ButtonText=\"更新\"\r\n                    clickFunc={handleSubmit}\r\n                  />\r\n                </BottomActions>\r\n              </form>\r\n            </>\r\n          )}\r\n        </Formik>\r\n      </ModalWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditProfile;\r\n","import styled from 'styled-components';\r\n\r\nexport const MainHeader = styled.div`\r\n  height: 100px;\r\n  border-bottom: 1px solid #79bd9a;\r\n`;\r\n\r\nexport const MainHeaderItemWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding-bottom: 10px;\r\n  border-bottom: 1px solid #a7a7a7;\r\n`;\r\n\r\nexport const MainHeaderLeftItems = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nexport const MainHeaderTitle = styled.h4`\r\n  color: #454545;\r\n  line-height: 40px;\r\n`;\r\n\r\nexport const MainBody = styled.div`\r\n  display: flex;\r\n  flex-direction: row-reverse;\r\n  margin-top: 30px;\r\n  gap: 40px 40px;\r\n  @media only screen and (max-width: 767px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const FolderSection = styled.div`\r\n  flex: 3;\r\n  box-shadow: 3px 3px 10px #6d6d6d;\r\n  @media only screen and (max-width: 767px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const SearchSection = styled.div`\r\n  flex: 2;\r\n  @media only screen and (max-width: 767px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const SearchContent = styled.div`\r\n  padding-top: 70px;\r\n\r\n  border-radius: 10px;\r\n  background: #fff;\r\n  box-shadow: 3px 3px 10px #6d6d6d;\r\n  position: -webkit-sticky;\r\n  position: sticky;\r\n  top: 0;\r\n`;\r\n\r\nexport const SearchFieldWrapper = styled.div`\r\n  width: 90%;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const NotFoundText = styled.p`\r\n  text-align: center;\r\n  margin: 70px 0;\r\n  color: #454545;\r\n  font-size: 18px;\r\n`;\r\n\r\nexport const SearchResultInfoWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const SearchResultCount = styled.p`\r\n  color: #454545;\r\n  font-size: 10px;\r\n`;\r\n\r\nexport const SearchQueryParamsTexts = styled.div``;\r\n\r\nexport const SearchQueryParamsText = styled.p`\r\n  color: #454545;\r\n  font-size: 10px;\r\n`;\r\n\r\nexport const LoadingWrapper = styled.div`\r\n  text-align: center;\r\n  margin: 20px 0;\r\n`;\r\n","import { VFC, ReactElement } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\n\r\nimport { selectActiveIndex } from '../../../stores/slices/bar/barSlice';\r\n\r\nimport {\r\n  MainHeaderItemWrapper,\r\n  MainHeaderLeftItems,\r\n  MainHeaderTitle,\r\n} from './MainElements';\r\n\r\nimport { SidebarData } from '../bar/SidebarData';\r\n\r\nconst MainHeader: VFC<{\r\n  title: string;\r\n  isHistory: boolean;\r\n  buttonElem: ReactElement | null;\r\n}> = ({ title, isHistory, buttonElem }) => {\r\n  const history = useHistory();\r\n  const activeIndex = useSelector(selectActiveIndex);\r\n\r\n  return (\r\n    <MainHeaderItemWrapper>\r\n      <MainHeaderLeftItems>\r\n        {isHistory && (\r\n          <IconButton\r\n            aria-label=\"back\"\r\n            onClick={() => {\r\n              history.push(SidebarData[activeIndex].path);\r\n            }}\r\n          >\r\n            <ArrowBackIcon />\r\n          </IconButton>\r\n        )}\r\n        <MainHeaderTitle>{title}</MainHeaderTitle>\r\n      </MainHeaderLeftItems>\r\n      {buttonElem}\r\n    </MainHeaderItemWrapper>\r\n  );\r\n};\r\n// const MainHeader: VFC<{\r\n//   title: string;\r\n//   isHistory: boolean;\r\n//   buttonText: string;\r\n//   clickOpenModalFunc: () => void;\r\n// }> = ({ title, isHistory, buttonText, clickOpenModalFunc }) => {\r\n//   const history = useHistory();\r\n//   const activeIndex = useSelector(selectActiveIndex);\r\n\r\n//   return (\r\n//     <MainHeaderItemWrapper>\r\n//       <MainHeaderLeftItems>\r\n//         {isHistory && (\r\n//           <IconButton\r\n//             aria-label=\"back\"\r\n//             onClick={() => {\r\n//               history.push(SidebarData[activeIndex].path);\r\n//             }}\r\n//           >\r\n//             <ArrowBackIcon />\r\n//           </IconButton>\r\n//         )}\r\n//         <MainHeaderTitle>{title}</MainHeaderTitle>\r\n//       </MainHeaderLeftItems>\r\n//       <OpenModalBtn onClick={clickOpenModalFunc}>{buttonText}</OpenModalBtn>\r\n//     </MainHeaderItemWrapper>\r\n//   );\r\n// };\r\n\r\nexport default MainHeader;\r\n","import styled from 'styled-components';\r\n\r\nimport { TableContainer, Table, TableCell } from '@mui/material';\r\n\r\nexport const ProfileItemWrapper = styled.div`\r\n  display: flex;\r\n  margin-top: 30px;\r\n  gap: 40px 40px;\r\n  @media only screen and (max-width: 767px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const ProfileLeftItem = styled.div`\r\n  flex: 3;\r\n  @media only screen and (max-width: 767px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const ProfileRightItems = styled.div`\r\n  flex: 2;\r\n  @media only screen and (max-width: 767px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const ProfileInfoContent = styled.div`\r\n  background: #fff;\r\n  box-shadow: 3px 3px 10px #6d6d6d;\r\n`;\r\n\r\nexport const OtherInfoContent = styled.div`\r\n  border-radius: 10px;\r\n  background: #fff;\r\n  box-shadow: 3px 3px 10px #6d6d6d;\r\n  padding: 20px 16px;\r\n`;\r\n\r\nexport const OtherInfoContentTitle = styled.p`\r\n  font-size: 18px !important;\r\n  border-bottom: 1px solid rgba(224, 224, 224, 1);\r\n  padding-bottom: 18px !important;\r\n`;\r\n\r\nexport const EditButtonWrapper = styled.div`\r\n  border-radius: 10px;\r\n  background: #fff;\r\n  box-shadow: 3px 3px 10px #6d6d6d;\r\n  padding: 20px 16px;\r\n  margin-top: 40px;\r\n`;\r\n\r\nexport const ProfileName = styled.div`\r\n  color: black;\r\n`;\r\n\r\nexport const ProfileTableHead = styled(TableCell)`\r\n  font-size: 18px !important;\r\n  padding-top: 20px !important;\r\n  padding-bottom: 20px !important;\r\n`;\r\n\r\nexport const ProfileTableCell = styled(TableCell)`\r\n  padding-top: 40px !important;\r\n  padding-bottom: 40px !important;\r\n`;\r\n\r\nexport const OtherInfoTableContainer = styled(TableContainer)`\r\n  box-shadow: none !important;\r\n`;\r\n\r\nexport const OtherInfoTable = styled(Table)`\r\n  border-color: white !important;\r\n`;\r\n","import { VFC, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n} from '@mui/material';\r\n\r\nimport { AppDispatch } from '../../../stores/app/store';\r\n\r\nimport {\r\n  selectMyProfile,\r\n  setOpenProfile,\r\n} from '../../../stores/slices/profile/profileSlice';\r\n\r\nimport { selectNumOfFavorite } from '../../../stores/slices/folder/folderSlice';\r\n\r\nimport { setActiveIndex } from '../../../stores/slices/bar/barSlice';\r\n\r\nimport { OpenEditProfileBtn } from '../../atoms/Buttons/ButtonDesign';\r\nimport TopLinkButton from '../../atoms/Buttons/TopLinkButton';\r\n\r\nimport EditProfile from '../../blocks/profile/EditProfile';\r\nimport MainHeader from '../../blocks/main/MainHeader';\r\n\r\nimport {\r\n  ProfileItemWrapper,\r\n  ProfileLeftItem,\r\n  ProfileRightItems,\r\n  ProfileInfoContent,\r\n  ProfileTableCell,\r\n  ProfileTableHead,\r\n  OtherInfoContent,\r\n  OtherInfoTableContainer,\r\n  OtherInfoTable,\r\n  EditButtonWrapper,\r\n} from './ProfileElements';\r\n\r\nconst Profile: VFC = () => {\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const profile = useSelector(selectMyProfile);\r\n  const numOfFavorite = useSelector(selectNumOfFavorite);\r\n\r\n  useEffect(() => {\r\n    dispatch(setActiveIndex(1));\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <EditProfile />\r\n      <MainHeader\r\n        title=\"MyPage\"\r\n        isHistory={false}\r\n        buttonElem={<TopLinkButton />}\r\n      />\r\n      <ProfileItemWrapper>\r\n        <ProfileLeftItem>\r\n          <ProfileInfoContent>\r\n            <TableContainer component={Paper}>\r\n              <Table aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <ProfileTableHead align=\"left\" colSpan={2}>\r\n                      プロフィール\r\n                    </ProfileTableHead>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  <TableRow>\r\n                    <ProfileTableCell align=\"left\">ユーザーID</ProfileTableCell>\r\n                    <ProfileTableCell align=\"left\">\r\n                      {profile.user}\r\n                    </ProfileTableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <ProfileTableCell align=\"left\">\r\n                      ニックネーム\r\n                    </ProfileTableCell>\r\n                    <ProfileTableCell align=\"left\">\r\n                      {profile.nickname}\r\n                    </ProfileTableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <ProfileTableCell align=\"left\">\r\n                      アカウントの作成\r\n                    </ProfileTableCell>\r\n                    <ProfileTableCell align=\"left\">\r\n                      {profile.created_on}\r\n                    </ProfileTableCell>\r\n                  </TableRow>\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </ProfileInfoContent>\r\n        </ProfileLeftItem>\r\n        <ProfileRightItems>\r\n          <OtherInfoContent>\r\n            <OtherInfoTableContainer>\r\n              <OtherInfoTable aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <ProfileTableHead align=\"left\" colSpan={2}>\r\n                      その他\r\n                    </ProfileTableHead>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  <TableRow>\r\n                    <ProfileTableCell align=\"left\">\r\n                      お気に入りされたフォルダの数\r\n                    </ProfileTableCell>\r\n                    <ProfileTableCell align=\"left\">\r\n                      {numOfFavorite}\r\n                    </ProfileTableCell>\r\n                  </TableRow>\r\n                </TableBody>\r\n              </OtherInfoTable>\r\n            </OtherInfoTableContainer>\r\n          </OtherInfoContent>\r\n          <EditButtonWrapper>\r\n            <OpenEditProfileBtn\r\n              type=\"button\"\r\n              onClick={() => {\r\n                dispatch(setOpenProfile());\r\n              }}\r\n            >\r\n              編集\r\n            </OpenEditProfileBtn>\r\n          </EditButtonWrapper>\r\n        </ProfileRightItems>\r\n      </ProfileItemWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import { VFC } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport { Switch } from '@material-ui/core';\r\n\r\nimport { AppDispatch } from '../../../stores/app/store';\r\n\r\nimport {\r\n  resetIsAuth,\r\n  setAuthErrorMessage,\r\n} from '../../../stores/slices/auth/authSlice';\r\n\r\nimport {\r\n  setInfoMessage,\r\n  setIsExistInfoMessage,\r\n} from '../../../stores/slices/message/messageSlice';\r\n\r\nimport {\r\n  selectIsLoadingFolder,\r\n  selectOpenNewFolder,\r\n  fetchFolderStart,\r\n  fetchFolderEnd,\r\n  fetchAsyncCreateFolder,\r\n  resetOpenNewFolder,\r\n  selectFolderErrorMessages,\r\n  resetFolderErrorMessage,\r\n} from '../../../stores/slices/folder/folderSlice';\r\n\r\nimport ModalWrapper from '../../atoms/Modal/ModalWrapper';\r\nimport {\r\n  TxField,\r\n  ErrorMessage,\r\n  BottomActions,\r\n  CancelButton,\r\n  SwitchWrapper,\r\n  SwitchSelectText,\r\n  SwitchSelect,\r\n  SwitchLabel,\r\n} from '../../atoms/Form/FormElements';\r\nimport SubmitButton from '../../atoms/Buttons/SubmitButton';\r\nimport ErrorAlert from '../../atoms/Alert/ErrorAlert';\r\n\r\nconst NewFolder: VFC = () => {\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const isLoadingFolder = useSelector(selectIsLoadingFolder);\r\n  const openNewFolder = useSelector(selectOpenNewFolder);\r\n  const folderErrorMessages = useSelector(selectFolderErrorMessages);\r\n\r\n  return (\r\n    <>\r\n      <ModalWrapper\r\n        isOpen={openNewFolder}\r\n        closeFunc={() => {\r\n          dispatch(resetOpenNewFolder());\r\n        }}\r\n      >\r\n        <Formik\r\n          initialErrors={{ name: 'required' }}\r\n          initialValues={{\r\n            name: '',\r\n            public: false,\r\n          }}\r\n          onSubmit={async (values) => {\r\n            dispatch(fetchFolderStart());\r\n            const result = await dispatch(fetchAsyncCreateFolder(values));\r\n            if (fetchAsyncCreateFolder.rejected.match(result)) {\r\n              if (result.payload) {\r\n                if (result.payload.code === 'token_not_valid') {\r\n                  dispatch(\r\n                    setAuthErrorMessage(\r\n                      'アクセストークンの有効期限が切れました。再ログインしてください'\r\n                    )\r\n                  );\r\n                  dispatch(resetIsAuth());\r\n                }\r\n              }\r\n            }\r\n            if (fetchAsyncCreateFolder.fulfilled.match(result)) {\r\n              dispatch(resetFolderErrorMessage());\r\n              dispatch(setInfoMessage('フォルダを作成しました'));\r\n              dispatch(setIsExistInfoMessage());\r\n            }\r\n            dispatch(fetchFolderEnd());\r\n            dispatch(resetOpenNewFolder());\r\n          }}\r\n          validationSchema={Yup.object().shape({\r\n            name: Yup.string()\r\n              .required('フォルダ名を入力してください')\r\n              .max(20, 'フォルダ名は20文字以下で設定してください'),\r\n          })}\r\n        >\r\n          {({\r\n            handleSubmit,\r\n            handleChange,\r\n            handleBlur,\r\n            values,\r\n            errors,\r\n            touched,\r\n            isValid,\r\n          }) => (\r\n            <>\r\n              {folderErrorMessages.map((message) => (\r\n                <ErrorAlert text={message} key={message} />\r\n              ))}\r\n              <form\r\n                onSubmit={(e) => {\r\n                  e.preventDefault();\r\n                }}\r\n              >\r\n                <TxField\r\n                  id=\"standard-basic\"\r\n                  variant=\"standard\"\r\n                  label=\"フォルダ名\"\r\n                  name=\"name\"\r\n                  type=\"input\"\r\n                  value={values.name}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                />\r\n                {touched.name && errors.name ? (\r\n                  <ErrorMessage>{errors.name}</ErrorMessage>\r\n                ) : null}\r\n                <SwitchWrapper>\r\n                  <SwitchLabel>公開設定</SwitchLabel>\r\n                  <SwitchSelect>\r\n                    <SwitchSelectText\r\n                      className={!values.public ? 'active' : ''}\r\n                    >\r\n                      非公開\r\n                    </SwitchSelectText>\r\n                    <Switch\r\n                      color=\"default\"\r\n                      checked={values.public}\r\n                      onChange={handleChange}\r\n                      name=\"public\"\r\n                      inputProps={{ 'aria-label': 'controlled' }}\r\n                    />\r\n                    <SwitchSelectText className={values.public ? 'active' : ''}>\r\n                      公開\r\n                    </SwitchSelectText>\r\n                  </SwitchSelect>\r\n                </SwitchWrapper>\r\n                <br />\r\n                <BottomActions>\r\n                  <CancelButton\r\n                    type=\"button\"\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      dispatch(resetOpenNewFolder());\r\n                    }}\r\n                  >\r\n                    キャンセル\r\n                  </CancelButton>\r\n                  <SubmitButton\r\n                    isLoading={isLoadingFolder}\r\n                    disabled={!isValid}\r\n                    ButtonText=\"作成\"\r\n                    clickFunc={handleSubmit}\r\n                  />\r\n                </BottomActions>\r\n              </form>\r\n            </>\r\n          )}\r\n        </Formik>\r\n      </ModalWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewFolder;\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport axios, { AxiosError } from 'axios';\r\nimport { RootState } from '../../app/store';\r\nimport apiURL from '../share';\r\n\r\nimport {\r\n  PROPS_GET_POSTS,\r\n  PROPS_CREATE_POST,\r\n  PROPS_UPDATE_POST,\r\n  POST,\r\n  POSTS,\r\n  RESPONSE_CREATE_POST_FAILURE,\r\n  POST_STATE,\r\n} from './types';\r\n\r\nexport const fetchAsyncGetPosts = createAsyncThunk(\r\n  'posts/get',\r\n  async (props: PROPS_GET_POSTS, { rejectWithValue }) => {\r\n    let url = `${apiURL}api/v1/postlist/${props.folder}/`;\r\n    if (props.params.url) {\r\n      url = props.params.url;\r\n    } else {\r\n      url += `?ordering=${props.params.ordering}&search=${props.params.search}`;\r\n    }\r\n    if (typeof localStorage.ajt === 'string') {\r\n      const res = await axios.get<POSTS>(url, {\r\n        headers: {\r\n          Authorization: `JWT ${localStorage.ajt}`,\r\n        },\r\n      });\r\n      return res.data;\r\n    }\r\n    return rejectWithValue({ errorMessage: 'ログインしていません' });\r\n  }\r\n);\r\n\r\nexport const fetchAsyncCreatePost = createAsyncThunk<\r\n  POST,\r\n  PROPS_CREATE_POST,\r\n  { rejectValue: RESPONSE_CREATE_POST_FAILURE }\r\n>('post/post', async (post: PROPS_CREATE_POST, { rejectWithValue }) => {\r\n  const data = {\r\n    url: post.url,\r\n    name: post.name,\r\n    text: post.text,\r\n    folder: post.folder,\r\n  };\r\n  if (typeof localStorage.ajt === 'string') {\r\n    const res = await axios\r\n      .post<POST>(`${apiURL}api/v1/post/`, data, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `JWT ${localStorage.ajt}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        const res_data: POST = response.data;\r\n        return res_data;\r\n      })\r\n      .catch((error: AxiosError<RESPONSE_CREATE_POST_FAILURE>) => {\r\n        if (!error.response) {\r\n          throw error;\r\n        }\r\n        return rejectWithValue(error.response.data);\r\n      });\r\n    return res;\r\n  }\r\n  return rejectWithValue({\r\n    url: [],\r\n    name: [],\r\n    text: [],\r\n    message: '',\r\n    auth: ['ログインまたはアカウントの作成を行ってください'],\r\n    code: '',\r\n  });\r\n});\r\nexport const fetchAsyncUpdatePost = createAsyncThunk<\r\n  POST,\r\n  PROPS_UPDATE_POST,\r\n  { rejectValue: RESPONSE_CREATE_POST_FAILURE }\r\n>('post/put', async (post: PROPS_UPDATE_POST, { rejectWithValue }) => {\r\n  const data = {\r\n    url: post.url,\r\n    name: post.name,\r\n    text: post.text,\r\n    folder: post.folder,\r\n  };\r\n  if (typeof localStorage.ajt === 'string') {\r\n    const res = await axios\r\n      .put<POST>(`${apiURL}api/v1/post/${post.id}/`, data, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `JWT ${localStorage.ajt}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        const res_data: POST = response.data;\r\n        return res_data;\r\n      })\r\n      .catch((error: AxiosError<RESPONSE_CREATE_POST_FAILURE>) => {\r\n        if (!error.response) {\r\n          throw error;\r\n        }\r\n        return rejectWithValue(error.response.data);\r\n      });\r\n    return res;\r\n  }\r\n  return rejectWithValue({\r\n    url: [],\r\n    name: [],\r\n    text: [],\r\n    message: '',\r\n    auth: ['ログインまたはアカウントの作成を行ってください'],\r\n    code: '',\r\n  });\r\n});\r\n// export const fetchAsyncCreatePost = createAsyncThunk(\r\n//   'post/post',\r\n//   async (post: PROPS_CREATE_POST, { rejectWithValue }) => {\r\n//     const data = {\r\n//       url: post.url,\r\n//       name: post.name,\r\n//       text: post.text,\r\n//       folder: post.folder,\r\n//     };\r\n//     if (typeof localStorage.ajt === 'string') {\r\n//       const res = await axios.post<POST>(`${apiURL}api/v1/post/`, data, {\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//           Authorization: `JWT ${localStorage.ajt}`,\r\n//         },\r\n//       });\r\n//       return res.data;\r\n//     }\r\n//     return rejectWithValue({ errorMessage: 'ログインしていません' });\r\n//   }\r\n// );\r\n\r\n// export const fetchAsyncUpdatePost = createAsyncThunk(\r\n//   'post/put',\r\n//   async (post: PROPS_UPDATE_POST, { rejectWithValue }) => {\r\n//     const data = {\r\n//       url: post.url,\r\n//       name: post.name,\r\n//       text: post.text,\r\n//       folder: post.folder,\r\n//     };\r\n//     if (typeof localStorage.ajt === 'string') {\r\n//       const res = await axios.put<POST>(\r\n//         `${apiURL}api/v1/post/${post.id}/`,\r\n//         data,\r\n//         {\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//             Authorization: `JWT ${localStorage.ajt}`,\r\n//           },\r\n//         }\r\n//       );\r\n//       return res.data;\r\n//     }\r\n//     return rejectWithValue({ errorMessage: 'ログインしていません' });\r\n//   }\r\n// );\r\n\r\nexport const fetchAsyncDeletePost = createAsyncThunk(\r\n  'post/delete',\r\n  async (id: string, { rejectWithValue }) => {\r\n    if (typeof localStorage.ajt === 'string') {\r\n      await axios.delete(`${apiURL}api/v1/post/${id}/`, {\r\n        headers: {\r\n          Authorization: `JWT ${localStorage.ajt}`,\r\n        },\r\n      });\r\n      return id;\r\n    }\r\n    return rejectWithValue({ errorMessage: 'ログインしていません' });\r\n  }\r\n);\r\n\r\nexport const fetchAsyncDeleteSelectPost = createAsyncThunk(\r\n  'post/select/delete',\r\n  async (id_list: string[], { rejectWithValue }) => {\r\n    const data = {\r\n      id: id_list,\r\n    };\r\n    if (typeof localStorage.ajt === 'string') {\r\n      await axios.post<string>(`${apiURL}api/v1/postdelete/`, data, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `JWT ${localStorage.ajt}`,\r\n        },\r\n      });\r\n      return id_list;\r\n    }\r\n    return rejectWithValue({ errorMessage: 'ログインしていません' });\r\n  }\r\n);\r\n\r\nconst postInitialState: POST_STATE = {\r\n  isLoadingPost: false,\r\n  isNewPost: false,\r\n  isExistPosts: true,\r\n  openNewPost: false,\r\n  openEditPost: false,\r\n  openDeletePost: false,\r\n  errorMessages: [],\r\n  posts: {\r\n    count: 0,\r\n    next: null,\r\n    previous: null,\r\n    results: [\r\n      {\r\n        id: '',\r\n        url: '',\r\n        name: '',\r\n        text: '',\r\n        folder: '',\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst postSlice = createSlice({\r\n  name: 'post',\r\n  initialState: postInitialState,\r\n  reducers: {\r\n    fetchPostStart(state) {\r\n      state.isLoadingPost = true;\r\n    },\r\n    fetchPostEnd(state) {\r\n      state.isLoadingPost = false;\r\n    },\r\n    setIsNewPost(state) {\r\n      state.isNewPost = true;\r\n    },\r\n    resetIsNewPost(state) {\r\n      state.isNewPost = false;\r\n    },\r\n    setIsExistPosts(state) {\r\n      state.isExistPosts = true;\r\n    },\r\n    resetIsExistPosts(state) {\r\n      state.isExistPosts = false;\r\n    },\r\n    setOpenNewPost(state) {\r\n      state.openNewPost = true;\r\n    },\r\n    resetOpenNewPost(state) {\r\n      state.openNewPost = false;\r\n    },\r\n    setOpenEditPost(state) {\r\n      state.openEditPost = true;\r\n    },\r\n    resetOpenEditPost(state) {\r\n      state.openEditPost = false;\r\n    },\r\n    setOpenDeletePost(state) {\r\n      state.openDeletePost = true;\r\n    },\r\n    resetOpenDeletePost(state) {\r\n      state.openDeletePost = false;\r\n    },\r\n    setPostErrorMessage(state, action: PayloadAction<string>) {\r\n      state.errorMessages = [action.payload];\r\n    },\r\n    resetPostErrorMessage(state) {\r\n      state.errorMessages = [];\r\n    },\r\n    resetPostsCount(state) {\r\n      state.posts.count = 0;\r\n    },\r\n    resetPosts(state) {\r\n      state.posts.count = 0;\r\n      state.posts.next = null;\r\n      state.posts.results = [];\r\n      state.isExistPosts = true;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchAsyncGetPosts.fulfilled, (state, action) => {\r\n      state.isNewPost = false;\r\n      if (state.posts.count === 0) {\r\n        state.posts = action.payload;\r\n      } else {\r\n        state.posts.results = state.posts.results.concat(\r\n          action.payload.results\r\n        );\r\n        state.posts.next = action.payload.next;\r\n        state.posts.previous = action.payload.previous;\r\n      }\r\n      if (action.payload.count === 0) {\r\n        state.isExistPosts = false;\r\n      } else if (action.payload.count > 0) {\r\n        state.isExistPosts = true;\r\n      }\r\n    });\r\n    builder.addCase(fetchAsyncCreatePost.fulfilled, (state, action) => {\r\n      state.isNewPost = true;\r\n      state.posts.results.unshift(action.payload);\r\n    });\r\n    builder.addCase(fetchAsyncCreatePost.rejected, (state, action) => {\r\n      if (action.payload) {\r\n        if (action.payload.url) {\r\n          state.errorMessages = action.payload.url;\r\n        } else if (action.payload.name) {\r\n          state.errorMessages = action.payload.name;\r\n        } else if (action.payload.text) {\r\n          state.errorMessages = action.payload.text;\r\n        } else if (action.payload.message) {\r\n          state.errorMessages = [action.payload.message];\r\n        }\r\n      }\r\n    });\r\n    builder.addCase(fetchAsyncUpdatePost.fulfilled, (state, action) => {\r\n      state.posts.results = state.posts.results.map((post) =>\r\n        post.id === action.payload.id ? action.payload : post\r\n      );\r\n    });\r\n    builder.addCase(fetchAsyncUpdatePost.rejected, (state, action) => {\r\n      if (action.payload) {\r\n        if (action.payload.url) {\r\n          state.errorMessages = action.payload.url;\r\n        } else if (action.payload.name) {\r\n          state.errorMessages = action.payload.name;\r\n        } else if (action.payload.text) {\r\n          state.errorMessages = action.payload.text;\r\n        } else if (action.payload.message) {\r\n          state.errorMessages = [action.payload.message];\r\n        }\r\n      }\r\n    });\r\n    builder.addCase(fetchAsyncDeletePost.fulfilled, (state, action) => {\r\n      state.posts.results = state.posts.results.filter(\r\n        (post) => post.id !== action.payload\r\n      );\r\n    });\r\n    builder.addCase(fetchAsyncDeleteSelectPost.fulfilled, (state, action) => {\r\n      const id_list = action.payload;\r\n      state.posts.results = state.posts.results.filter(\r\n        (post) => id_list.includes(post.id) === false\r\n      );\r\n    });\r\n  },\r\n});\r\n\r\nexport const {\r\n  fetchPostStart,\r\n  fetchPostEnd,\r\n  setIsNewPost,\r\n  resetIsNewPost,\r\n  resetPostsCount,\r\n  setIsExistPosts,\r\n  resetIsExistPosts,\r\n  setOpenNewPost,\r\n  resetOpenNewPost,\r\n  setOpenEditPost,\r\n  resetOpenEditPost,\r\n  setOpenDeletePost,\r\n  resetOpenDeletePost,\r\n  setPostErrorMessage,\r\n  resetPostErrorMessage,\r\n  resetPosts,\r\n} = postSlice.actions;\r\n\r\nexport const selectIsLoadingPost = (state: RootState): boolean =>\r\n  state.post.isLoadingPost;\r\nexport const selectIsExistPosts = (state: RootState): boolean =>\r\n  state.post.isExistPosts;\r\nexport const selectIsNewPost = (state: RootState): boolean =>\r\n  state.post.isNewPost;\r\nexport const selectPosts = (state: RootState): POSTS => state.post.posts;\r\nexport const selectOpenDeletePost = (state: RootState): boolean =>\r\n  state.post.openDeletePost;\r\nexport const selectOpenNewPost = (state: RootState): boolean =>\r\n  state.post.openNewPost;\r\nexport const selectOpenEditPost = (state: RootState): boolean =>\r\n  state.post.openEditPost;\r\nexport const selectPostErrorMessages = (state: RootState): string[] =>\r\n  state.post.errorMessages;\r\n\r\nexport default postSlice.reducer;\r\n","import styled from 'styled-components';\r\n\r\nimport { TextField, RadioGroup } from '@material-ui/core';\r\n\r\nexport const SearchField = styled(TextField)`\r\n  width: 100%;\r\n  margin-bottom: 20px !important;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  width: 100px;\r\n`;\r\n\r\nexport const PublicRadioGroup = styled(RadioGroup)`\r\n  margin: 0px 15px;\r\n`;\r\n\r\nexport const PublicRadioWrapper = styled.div`\r\n  margin: 20px 0;\r\n`;\r\n","import { VFC, ChangeEvent } from 'react';\r\n\r\nimport { SearchField } from './InputElements';\r\n\r\nconst SearchBox: VFC<{\r\n  changeEvent: (e: ChangeEvent<HTMLInputElement>) => void;\r\n}> = ({ changeEvent }) => (\r\n  <SearchField\r\n    id=\"outlined-search\"\r\n    variant=\"outlined\"\r\n    label=\"検索ワード\"\r\n    type=\"search\"\r\n    color=\"primary\"\r\n    onChange={changeEvent}\r\n  />\r\n);\r\n\r\nexport default SearchBox;\r\n","import { VFC } from 'react';\r\n\r\nimport {\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  FormControl,\r\n  FormLabel,\r\n} from '@mui/material';\r\n\r\nimport { PublicRadioWrapper } from './InputElements';\r\n\r\nconst PublicSelect: VFC<{\r\n  checkedNot: () => void;\r\n  checkedPublic: () => void;\r\n  checkedPrivate: () => void;\r\n}> = ({ checkedNot, checkedPublic, checkedPrivate }) => (\r\n  <PublicRadioWrapper>\r\n    <FormControl component=\"fieldset\">\r\n      <FormLabel component=\"legend\">公開設定</FormLabel>\r\n      <RadioGroup\r\n        row\r\n        aria-label=\"public\"\r\n        defaultValue=\"\"\r\n        name=\"row-radio-buttons-group\"\r\n      >\r\n        <FormControlLabel\r\n          value=\"\"\r\n          control={<Radio size=\"small\" />}\r\n          label=\"未指定\"\r\n          onChange={checkedNot}\r\n        />\r\n        <FormControlLabel\r\n          value=\"true\"\r\n          control={<Radio size=\"small\" />}\r\n          label=\"公開\"\r\n          onChange={checkedPublic}\r\n        />\r\n        <FormControlLabel\r\n          value=\"false\"\r\n          control={<Radio size=\"small\" />}\r\n          label=\"非公開\"\r\n          onChange={checkedPrivate}\r\n        />\r\n      </RadioGroup>\r\n    </FormControl>\r\n  </PublicRadioWrapper>\r\n);\r\n\r\nexport default PublicSelect;\r\n","import { VFC } from 'react';\r\n\r\nimport {\r\n  Box,\r\n  InputLabel,\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n  SelectChangeEvent,\r\n} from '@mui/material';\r\n\r\nconst OrderSelect: VFC<{\r\n  selectValue: string;\r\n  changeEvent: (e: SelectChangeEvent<string>) => void;\r\n}> = ({ selectValue, changeEvent }) => (\r\n  <Box sx={{ minWidth: 120 }}>\r\n    <FormControl fullWidth>\r\n      <InputLabel id=\"demo-simple-select-label\">並べ替え</InputLabel>\r\n      <Select\r\n        labelId=\"demo-simple-select-label\"\r\n        id=\"demo-simple-select\"\r\n        value={selectValue}\r\n        label=\"並べ替え\"\r\n        onChange={changeEvent}\r\n      >\r\n        <MenuItem value=\"-posts_add\">新しい順</MenuItem>\r\n        <MenuItem value=\"posts_add\">古い順</MenuItem>\r\n      </Select>\r\n    </FormControl>\r\n  </Box>\r\n);\r\n\r\nexport default OrderSelect;\r\n","import { VFC } from 'react';\r\n\r\nimport { SearchBtn } from './ButtonDesign';\r\n\r\nconst SearchButton: VFC<{\r\n  ButtonText: string;\r\n}> = ({ ButtonText }) => <SearchBtn type=\"submit\">{ButtonText}</SearchBtn>;\r\n\r\nexport default SearchButton;\r\n","import styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { List, ListItem, ListItemText, Avatar } from '@mui/material';\r\n\r\nexport const FolderItemLink = styled(Link)`\r\n  text-decoration: none;\r\n`;\r\n\r\nexport const FList = styled(List)`\r\n  padding: 0 !important;\r\n`;\r\n\r\nexport const FListItem = styled(ListItem)`\r\n  transition: 0.3s;\r\n  padding: 20px 20px !important;\r\n  &:hover {\r\n    background-color: #f6f6f6 !important;\r\n    & .MuiListItemText-primary {\r\n      color: #00ff00 !important;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const FListItemText = styled(ListItemText)`\r\n  & .MuiListItemText-primary {\r\n    color: #79bd9a !important;\r\n    transition: 0.3s;\r\n  }\r\n`;\r\n\r\nexport const FolderAvatar = styled(Avatar)`\r\n  background: #79bd9a !important;\r\n`;\r\n\r\nexport const FolderDetailInfoWrapper = styled.div`\r\n  margin: 20px 0;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  background: #fff;\r\n  box-shadow: 3px 3px 10px #6d6d6d;\r\n  display: flex;\r\n  @media only screen and (max-width: 767px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const FolderDetailInfoData = styled.div`\r\n  flex: 5;\r\n  border-right: 1px solid #a7a7a7;\r\n  padding: 10px;\r\n  @media only screen and (max-width: 767px) {\r\n    width: 100%;\r\n    border-right: none;\r\n    border-bottom: 1px solid #a7a7a7;\r\n  }\r\n`;\r\n\r\nexport const FolderDetailInfoButtons = styled.div`\r\n  flex: 2;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  @media only screen and (max-width: 767px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const FolderDetailInfoDataTitle = styled.h2`\r\n  color: #454545;\r\n`;\r\n\r\nexport const FolderDetailInfoDataText = styled.p`\r\n  color: #858585;\r\n  font-size: 13px;\r\n`;\r\n","import { VFC, ReactNode } from 'react';\r\n\r\nimport { FList } from './FolderElements';\r\n\r\nconst FolderList: VFC<{ children: ReactNode }> = ({ children }) => (\r\n  <FList sx={{ width: '100%', bgcolor: 'background.paper' }}>{children}</FList>\r\n);\r\n\r\nexport default FolderList;\r\n","import { VFC } from 'react';\r\n\r\nimport FolderIcon from '@mui/icons-material/Folder';\r\n\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\n\r\nimport { FListItem, FListItemText, FolderAvatar } from './FolderElements';\r\n\r\ninterface FOLDER {\r\n  id: string;\r\n  user: string;\r\n  name: string;\r\n  public: boolean;\r\n  posts_add: string;\r\n  favorite: string[] | null;\r\n}\r\n\r\nconst FolderListItem: VFC<{ folder: FOLDER }> = ({ folder }) => (\r\n  <FListItem>\r\n    <ListItemAvatar>\r\n      <FolderAvatar>\r\n        <FolderIcon />\r\n      </FolderAvatar>\r\n    </ListItemAvatar>\r\n    <FListItemText primary={folder.name} secondary={folder.posts_add} />\r\n  </FListItem>\r\n);\r\n\r\nexport default FolderListItem;\r\n","import { VFC, useEffect, useState, FormEvent } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport Divider from '@mui/material/Divider';\r\n\r\nimport { AppDispatch } from '../../../stores/app/store';\r\nimport NewFolder from '../../blocks/folder/NewFolder';\r\n\r\nimport {\r\n  selectIsLoadingFolder,\r\n  selectHasMyFolder,\r\n  setOpenNewFolder,\r\n  fetchFolderStart,\r\n  fetchFolderEnd,\r\n  setFolder,\r\n  setHasMyFolder,\r\n  selectMyFoldersSearchResult,\r\n  searchMyFolders,\r\n} from '../../../stores/slices/folder/folderSlice';\r\n\r\nimport { resetPosts } from '../../../stores/slices/post/postSlice';\r\n\r\nimport { setActiveIndex } from '../../../stores/slices/bar/barSlice';\r\n\r\nimport SearchBox from '../../atoms/Input/SearchBox';\r\nimport PublicSelect from '../../atoms/Input/PublicSelect';\r\nimport TopOrderSelect from '../../atoms/TopOrderSelect';\r\nimport SearchButton from '../../atoms/Buttons/SearchButton';\r\nimport Loading from '../../atoms/Loader';\r\nimport { OpenModalBtn } from '../../atoms/Buttons/ButtonDesign';\r\n\r\nimport {\r\n  MainBody,\r\n  FolderSection,\r\n  SearchSection,\r\n  SearchContent,\r\n  SearchFieldWrapper,\r\n  NotFoundText,\r\n  LoadingWrapper,\r\n} from '../../blocks/main/MainElements';\r\n\r\nimport FolderList from '../../blocks/folder/FolderList';\r\nimport FolderListItem from '../../blocks/folder/FolderListItem';\r\nimport { FolderItemLink } from '../../blocks/folder/FolderElements';\r\nimport MainHeader from '../../blocks/main/MainHeader';\r\n\r\nconst MyFoldersPage: VFC = () => {\r\n  const hasMyFolder = useSelector(selectHasMyFolder);\r\n  const dispatch: AppDispatch = useDispatch();\r\n\r\n  const [searchText, setSearchText] = useState<string>('');\r\n  const [orderingText, setOrderingText] = useState<string>('');\r\n  const [Public, setPublic] = useState<string>('');\r\n  const myfoldersSearchResult = useSelector(selectMyFoldersSearchResult);\r\n  const isLoadingFolder = useSelector(selectIsLoadingFolder);\r\n\r\n  useEffect(() => {\r\n    dispatch(setActiveIndex(0));\r\n  }, [dispatch]);\r\n\r\n  const searchFolder = (e: FormEvent<HTMLFormElement>) => {\r\n    window.scrollTo({ top: 0 });\r\n    e.preventDefault();\r\n    dispatch(setHasMyFolder());\r\n    dispatch(fetchFolderStart());\r\n    dispatch(\r\n      searchMyFolders({\r\n        search: searchText,\r\n        public: Public,\r\n        ordering: orderingText,\r\n      })\r\n    );\r\n\r\n    dispatch(fetchFolderEnd());\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <NewFolder />\r\n      <MainHeader\r\n        title=\"MyFolder\"\r\n        isHistory={false}\r\n        buttonElem={\r\n          <OpenModalBtn\r\n            onClick={() => {\r\n              dispatch(setOpenNewFolder());\r\n            }}\r\n          >\r\n            作成\r\n          </OpenModalBtn>\r\n        }\r\n      />\r\n      <MainBody>\r\n        <SearchSection>\r\n          <SearchContent>\r\n            <SearchFieldWrapper>\r\n              <form onSubmit={(e) => searchFolder(e)}>\r\n                <SearchBox changeEvent={(e) => setSearchText(e.target.value)} />\r\n                <PublicSelect\r\n                  checkedNot={() => setPublic('')}\r\n                  checkedPublic={() => setPublic('true')}\r\n                  checkedPrivate={() => setPublic('false')}\r\n                />\r\n                <TopOrderSelect\r\n                  selectValue={orderingText}\r\n                  changeEvent={(e) => setOrderingText(e.target.value)}\r\n                />\r\n                <SearchButton ButtonText=\"検索\" />\r\n              </form>\r\n            </SearchFieldWrapper>\r\n          </SearchContent>\r\n        </SearchSection>\r\n        <FolderSection>\r\n          {!isLoadingFolder ? (\r\n            hasMyFolder ? (\r\n              <FolderList>\r\n                {myfoldersSearchResult.map((folder) => (\r\n                  <FolderItemLink\r\n                    key={folder.id}\r\n                    to={`/folder/${folder.id}`}\r\n                    onClick={() => {\r\n                      dispatch(\r\n                        setFolder({\r\n                          id: folder.id,\r\n                          user: folder.user,\r\n                          name: folder.name,\r\n                          public: folder.public,\r\n                          posts_add: folder.posts_add,\r\n                          favorite: folder.favorite,\r\n                        })\r\n                      );\r\n                      dispatch(resetPosts());\r\n                    }}\r\n                  >\r\n                    <FolderListItem folder={folder} />\r\n                    <Divider />\r\n                  </FolderItemLink>\r\n                ))}\r\n              </FolderList>\r\n            ) : (\r\n              <NotFoundText>フォルダが見つかりませんでした。</NotFoundText>\r\n            )\r\n          ) : (\r\n            <LoadingWrapper>\r\n              <Loading />\r\n            </LoadingWrapper>\r\n          )}\r\n        </FolderSection>\r\n      </MainBody>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MyFoldersPage;\r\n","import { VFC } from 'react';\r\n\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n} from '@material-ui/core';\r\n\r\nconst CommonDialog: VFC<{\r\n  msg: string;\r\n  isOpen: boolean;\r\n  doYes: () => void;\r\n  doNo: () => void;\r\n}> = ({ msg, isOpen, doYes, doNo }) => (\r\n  <div>\r\n    <Dialog\r\n      open={isOpen}\r\n      keepMounted\r\n      onClose={() => doNo()}\r\n      aria-labelledby=\"common-dialog-title\"\r\n      aria-describedby=\"common-dialog-description\"\r\n    >\r\n      <DialogContent>{msg}</DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={() => doNo()} color=\"primary\">\r\n          いいえ\r\n        </Button>\r\n        <Button onClick={() => doYes()} color=\"primary\">\r\n          はい\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  </div>\r\n);\r\nexport default CommonDialog;\r\n","import { VFC } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport { Switch } from '@material-ui/core';\r\n\r\nimport { AppDispatch } from '../../../stores/app/store';\r\n\r\nimport {\r\n  resetIsAuth,\r\n  setAuthErrorMessage,\r\n} from '../../../stores/slices/auth/authSlice';\r\n\r\nimport {\r\n  setInfoMessage,\r\n  setIsExistInfoMessage,\r\n} from '../../../stores/slices/message/messageSlice';\r\n\r\nimport {\r\n  selectIsLoadingFolder,\r\n  selectOpenEditFolder,\r\n  fetchFolderStart,\r\n  fetchFolderEnd,\r\n  fetchAsyncUpdateFolder,\r\n  resetOpenEditFolder,\r\n  selectFolder,\r\n  resetFolderErrorMessage,\r\n} from '../../../stores/slices/folder/folderSlice';\r\n\r\nimport ModalWrapper from '../../atoms/Modal/ModalWrapper';\r\nimport {\r\n  TxField,\r\n  ErrorMessage,\r\n  BottomActions,\r\n  CancelButton,\r\n  SwitchWrapper,\r\n  SwitchSelectText,\r\n  SwitchSelect,\r\n  SwitchLabel,\r\n} from '../../atoms/Form/FormElements';\r\n\r\nimport SubmitButton from '../../atoms/Buttons/SubmitButton';\r\n\r\nconst EditFolder: VFC = () => {\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const isLoadingFolder = useSelector(selectIsLoadingFolder);\r\n  const openEditFolder = useSelector(selectOpenEditFolder);\r\n  const folder = useSelector(selectFolder);\r\n\r\n  return (\r\n    <>\r\n      <ModalWrapper\r\n        isOpen={openEditFolder}\r\n        closeFunc={() => {\r\n          dispatch(resetOpenEditFolder());\r\n        }}\r\n      >\r\n        <Formik\r\n          initialErrors={{ name: 'required' }}\r\n          initialValues={{\r\n            id: folder.id,\r\n            name: folder.name,\r\n            public: folder.public,\r\n          }}\r\n          onSubmit={async (values) => {\r\n            dispatch(fetchFolderStart());\r\n            const result = await dispatch(fetchAsyncUpdateFolder(values));\r\n            if (fetchAsyncUpdateFolder.rejected.match(result)) {\r\n              if (result.payload) {\r\n                if (result.payload.code === 'token_not_valid') {\r\n                  dispatch(\r\n                    setAuthErrorMessage(\r\n                      'アクセストークンの有効期限が切れました。再ログインしてください'\r\n                    )\r\n                  );\r\n                  dispatch(resetIsAuth());\r\n                }\r\n              }\r\n            }\r\n            if (fetchAsyncUpdateFolder.fulfilled.match(result)) {\r\n              dispatch(resetFolderErrorMessage());\r\n              dispatch(setInfoMessage('フォルダを作成しました'));\r\n              dispatch(setIsExistInfoMessage());\r\n            }\r\n            dispatch(fetchFolderEnd());\r\n            dispatch(resetOpenEditFolder());\r\n          }}\r\n          validationSchema={Yup.object().shape({\r\n            name: Yup.string()\r\n              .required('フォルダ名を入力してください')\r\n              .max(20, 'フォルダ名は20文字以下で設定してください'),\r\n          })}\r\n        >\r\n          {({\r\n            handleSubmit,\r\n            handleChange,\r\n            handleBlur,\r\n            values,\r\n            errors,\r\n            touched,\r\n            isValid,\r\n          }) => (\r\n            <form\r\n              onSubmit={(e) => {\r\n                e.preventDefault();\r\n              }}\r\n            >\r\n              <TxField\r\n                id=\"standard-basic\"\r\n                variant=\"standard\"\r\n                label=\"name\"\r\n                name=\"name\"\r\n                type=\"input\"\r\n                value={values.name}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n              />\r\n              {touched.name && errors.name ? (\r\n                <ErrorMessage>{errors.name}</ErrorMessage>\r\n              ) : null}\r\n              <SwitchWrapper>\r\n                <SwitchLabel>公開設定</SwitchLabel>\r\n                <SwitchSelect>\r\n                  <SwitchSelectText className={!values.public ? 'active' : ''}>\r\n                    非公開\r\n                  </SwitchSelectText>\r\n                  <Switch\r\n                    color=\"default\"\r\n                    checked={values.public}\r\n                    onChange={handleChange}\r\n                    name=\"public\"\r\n                    inputProps={{ 'aria-label': 'controlled' }}\r\n                  />\r\n                  <SwitchSelectText className={values.public ? 'active' : ''}>\r\n                    公開\r\n                  </SwitchSelectText>\r\n                </SwitchSelect>\r\n              </SwitchWrapper>\r\n              <br />\r\n              <BottomActions>\r\n                <CancelButton\r\n                  type=\"button\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    dispatch(resetOpenEditFolder());\r\n                  }}\r\n                >\r\n                  キャンセル\r\n                </CancelButton>\r\n                <SubmitButton\r\n                  isLoading={isLoadingFolder}\r\n                  disabled={!isValid}\r\n                  ButtonText=\"更新\"\r\n                  clickFunc={handleSubmit}\r\n                />\r\n              </BottomActions>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n      </ModalWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditFolder;\r\n","import { VFC } from 'react';\r\n\r\nimport {\r\n  Box,\r\n  InputLabel,\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n  SelectChangeEvent,\r\n} from '@mui/material';\r\n\r\nconst PostOrderSelect: VFC<{\r\n  selectValue: string;\r\n  changeEvent: (e: SelectChangeEvent<string>) => void;\r\n}> = ({ selectValue, changeEvent }) => (\r\n  <Box sx={{ minWidth: 120 }}>\r\n    <FormControl fullWidth>\r\n      <InputLabel id=\"demo-simple-select-label\">並び替え</InputLabel>\r\n      <Select\r\n        labelId=\"demo-simple-select-label\"\r\n        id=\"demo-simple-select\"\r\n        value={selectValue}\r\n        label=\"order\"\r\n        onChange={changeEvent}\r\n      >\r\n        <MenuItem value=\"name\">50音順</MenuItem>\r\n        <MenuItem value=\"-name\">50音順(逆順)</MenuItem>\r\n      </Select>\r\n    </FormControl>\r\n  </Box>\r\n);\r\n\r\nexport default PostOrderSelect;\r\n","import { VFC } from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { AppDispatch } from '../../../stores/app/store';\r\n\r\nimport {\r\n  resetIsAuth,\r\n  setAuthErrorMessage,\r\n} from '../../../stores/slices/auth/authSlice';\r\n\r\nimport {\r\n  setInfoMessage,\r\n  setIsExistInfoMessage,\r\n} from '../../../stores/slices/message/messageSlice';\r\n\r\nimport { selectFolder } from '../../../stores/slices/folder/folderSlice';\r\n\r\nimport {\r\n  selectIsLoadingPost,\r\n  selectOpenNewPost,\r\n  selectPostErrorMessages,\r\n  fetchPostStart,\r\n  fetchPostEnd,\r\n  fetchAsyncCreatePost,\r\n  resetOpenNewPost,\r\n  resetPostErrorMessage,\r\n} from '../../../stores/slices/post/postSlice';\r\n\r\nimport ModalWrapper from '../../atoms/Modal/ModalWrapper';\r\nimport {\r\n  TxField,\r\n  ErrorMessage,\r\n  BottomActions,\r\n  CancelButton,\r\n} from '../../atoms/Form/FormElements';\r\nimport SubmitButton from '../../atoms/Buttons/SubmitButton';\r\nimport ErrorAlert from '../../atoms/Alert/ErrorAlert';\r\n\r\nconst NewPost: VFC = () => {\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const folder = useSelector(selectFolder);\r\n  const isLoadingPost = useSelector(selectIsLoadingPost);\r\n  const openNewPost = useSelector(selectOpenNewPost);\r\n  const postErrorMessages = useSelector(selectPostErrorMessages);\r\n\r\n  return (\r\n    <>\r\n      <ModalWrapper\r\n        isOpen={openNewPost}\r\n        closeFunc={() => {\r\n          dispatch(resetOpenNewPost());\r\n        }}\r\n      >\r\n        <Formik\r\n          initialErrors={{ url: 'required', name: 'required' }}\r\n          initialValues={{\r\n            url: '',\r\n            name: '',\r\n            text: '',\r\n            folder: folder.id,\r\n          }}\r\n          onSubmit={async (values) => {\r\n            dispatch(fetchPostStart());\r\n            const result = await dispatch(fetchAsyncCreatePost(values));\r\n            if (fetchAsyncCreatePost.rejected.match(result)) {\r\n              if (result.payload) {\r\n                if (result.payload.code === 'token_not_valid') {\r\n                  dispatch(\r\n                    setAuthErrorMessage(\r\n                      'アクセストークンの有効期限が切れました。再ログインしてください'\r\n                    )\r\n                  );\r\n                  dispatch(resetIsAuth());\r\n                }\r\n              }\r\n            }\r\n            if (fetchAsyncCreatePost.fulfilled.match(result)) {\r\n              dispatch(resetPostErrorMessage());\r\n              dispatch(setInfoMessage(`${values.name}を作成しました`));\r\n              dispatch(setIsExistInfoMessage());\r\n              dispatch(resetOpenNewPost());\r\n            }\r\n            dispatch(fetchPostEnd());\r\n          }}\r\n          validationSchema={Yup.object().shape({\r\n            url: Yup.string()\r\n              .required('URLを入力してください')\r\n              .matches(/https?:\\/\\/([a-z]{1,}\\.|)/, 'URLの形式が間違っています')\r\n              .max(300, 'URLは300文字以内で設定してください'),\r\n            name: Yup.string()\r\n              .required('名前を入力してください')\r\n              .max(40, '名前は40文字以内で設定してください'),\r\n            text: Yup.string().max(\r\n              150,\r\n              '説明文は150文字以内で設定してください'\r\n            ),\r\n          })}\r\n        >\r\n          {({\r\n            handleSubmit,\r\n            handleChange,\r\n            handleBlur,\r\n            values,\r\n            errors,\r\n            touched,\r\n            isValid,\r\n          }) => (\r\n            <>\r\n              {postErrorMessages.map((message) => (\r\n                <ErrorAlert text={message} key={message} />\r\n              ))}\r\n              <form\r\n                onSubmit={(e) => {\r\n                  e.preventDefault();\r\n                }}\r\n              >\r\n                <TxField\r\n                  id=\"standard-basic\"\r\n                  variant=\"standard\"\r\n                  label=\"URL\"\r\n                  name=\"url\"\r\n                  type=\"input\"\r\n                  value={values.url}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                />\r\n                {touched.url && errors.url ? (\r\n                  <ErrorMessage>{errors.url}</ErrorMessage>\r\n                ) : null}\r\n                <TxField\r\n                  id=\"standard-basic\"\r\n                  variant=\"standard\"\r\n                  label=\"名前\"\r\n                  name=\"name\"\r\n                  type=\"input\"\r\n                  value={values.name}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                />\r\n                {touched.name && errors.name ? (\r\n                  <ErrorMessage>{errors.name}</ErrorMessage>\r\n                ) : null}\r\n                <br />\r\n                <TxField\r\n                  id=\"standard-basic\"\r\n                  variant=\"standard\"\r\n                  label=\"説明\"\r\n                  name=\"text\"\r\n                  type=\"input\"\r\n                  value={values.text}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  multiline\r\n                />\r\n                {touched.text && errors.text ? (\r\n                  <ErrorMessage>{errors.text}</ErrorMessage>\r\n                ) : null}\r\n                <br />\r\n                <BottomActions>\r\n                  <CancelButton\r\n                    type=\"button\"\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      dispatch(resetOpenNewPost());\r\n                    }}\r\n                  >\r\n                    キャンセル\r\n                  </CancelButton>\r\n                  <SubmitButton\r\n                    isLoading={isLoadingPost}\r\n                    disabled={!isValid}\r\n                    ButtonText=\"作成\"\r\n                    clickFunc={handleSubmit}\r\n                  />\r\n                </BottomActions>\r\n              </form>\r\n            </>\r\n          )}\r\n        </Formik>\r\n      </ModalWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewPost;\r\n","import { VFC } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport { AppDispatch } from '../../../stores/app/store';\r\n\r\nimport {\r\n  resetIsAuth,\r\n  setAuthErrorMessage,\r\n} from '../../../stores/slices/auth/authSlice';\r\n\r\nimport {\r\n  setInfoMessage,\r\n  setIsExistInfoMessage,\r\n} from '../../../stores/slices/message/messageSlice';\r\n\r\nimport {\r\n  fetchPostStart,\r\n  fetchPostEnd,\r\n  fetchAsyncUpdatePost,\r\n  resetOpenEditPost,\r\n  selectIsLoadingPost,\r\n  selectOpenEditPost,\r\n  selectPostErrorMessages,\r\n  resetPostErrorMessage,\r\n} from '../../../stores/slices/post/postSlice';\r\n\r\nimport ModalWrapper from '../../atoms/Modal/ModalWrapper';\r\nimport {\r\n  TxField,\r\n  ErrorMessage,\r\n  BottomActions,\r\n  CancelButton,\r\n} from '../../atoms/Form/FormElements';\r\n\r\nimport SubmitButton from '../../atoms/Buttons/SubmitButton';\r\nimport ErrorAlert from '../../atoms/Alert/ErrorAlert';\r\n\r\nconst EditPost: VFC<{\r\n  id: string;\r\n  url: string;\r\n  name: string;\r\n  text: string;\r\n  folder: string;\r\n}> = ({ id, url, name, text, folder }) => {\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const isLoadingPost = useSelector(selectIsLoadingPost);\r\n  const openEditPost = useSelector(selectOpenEditPost);\r\n  const postErrorMessages = useSelector(selectPostErrorMessages);\r\n\r\n  return (\r\n    <>\r\n      <ModalWrapper\r\n        isOpen={openEditPost}\r\n        closeFunc={() => {\r\n          dispatch(resetOpenEditPost());\r\n        }}\r\n      >\r\n        <Formik\r\n          initialErrors={{ url: 'required', name: 'required' }}\r\n          initialValues={{\r\n            id,\r\n            url,\r\n            name,\r\n            text,\r\n            folder,\r\n          }}\r\n          onSubmit={async (values) => {\r\n            dispatch(fetchPostStart());\r\n            const result = await dispatch(fetchAsyncUpdatePost(values));\r\n            if (fetchAsyncUpdatePost.rejected.match(result)) {\r\n              if (result.payload) {\r\n                if (result.payload.code === 'token_not_valid') {\r\n                  dispatch(\r\n                    setAuthErrorMessage(\r\n                      'アクセストークンの有効期限が切れました。再ログインしてください'\r\n                    )\r\n                  );\r\n                  dispatch(resetIsAuth());\r\n                }\r\n              }\r\n            }\r\n            if (fetchAsyncUpdatePost.fulfilled.match(result)) {\r\n              dispatch(resetPostErrorMessage());\r\n              dispatch(setInfoMessage(`${values.name}を更新しました`));\r\n              dispatch(setIsExistInfoMessage());\r\n            }\r\n            dispatch(fetchPostEnd());\r\n            dispatch(resetOpenEditPost());\r\n          }}\r\n          validationSchema={Yup.object().shape({\r\n            url: Yup.string()\r\n              .required('URLを入力してください')\r\n              .max(300, 'URLは300文字以内で設定してください'),\r\n            name: Yup.string()\r\n              .required('名前を入力してください')\r\n              .max(40, '名前は40文字以内で設定してください'),\r\n            text: Yup.string().max(\r\n              150,\r\n              '説明文は150文字以内で設定してください'\r\n            ),\r\n          })}\r\n        >\r\n          {({\r\n            handleSubmit,\r\n            handleChange,\r\n            handleBlur,\r\n            values,\r\n            errors,\r\n            touched,\r\n            isValid,\r\n          }) => (\r\n            <>\r\n              {postErrorMessages.map((message) => (\r\n                <ErrorAlert text={message} key={message} />\r\n              ))}\r\n              <form\r\n                onSubmit={(e) => {\r\n                  e.preventDefault();\r\n                }}\r\n              >\r\n                <TxField\r\n                  id=\"standard-basic\"\r\n                  variant=\"standard\"\r\n                  label=\"URL\"\r\n                  name=\"url\"\r\n                  type=\"input\"\r\n                  value={values.url}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                />\r\n                {touched.url && errors.url ? (\r\n                  <ErrorMessage>{errors.url}</ErrorMessage>\r\n                ) : null}\r\n                <TxField\r\n                  id=\"standard-basic\"\r\n                  variant=\"standard\"\r\n                  label=\"名前\"\r\n                  name=\"name\"\r\n                  type=\"input\"\r\n                  value={values.name}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                />\r\n                {touched.name && errors.name ? (\r\n                  <ErrorMessage>{errors.name}</ErrorMessage>\r\n                ) : null}\r\n                <br />\r\n                <TxField\r\n                  id=\"standard-basic\"\r\n                  variant=\"standard\"\r\n                  label=\"説明\"\r\n                  name=\"text\"\r\n                  type=\"input\"\r\n                  value={values.text}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  multiline\r\n                />\r\n                {touched.text && errors.text ? (\r\n                  <ErrorMessage>{errors.text}</ErrorMessage>\r\n                ) : null}\r\n                <br />\r\n                <BottomActions>\r\n                  <CancelButton\r\n                    type=\"button\"\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      dispatch(resetOpenEditPost());\r\n                    }}\r\n                  >\r\n                    キャンセル\r\n                  </CancelButton>\r\n                  <SubmitButton\r\n                    isLoading={isLoadingPost}\r\n                    disabled={!isValid}\r\n                    ButtonText=\"更新\"\r\n                    clickFunc={handleSubmit}\r\n                  />\r\n                </BottomActions>\r\n              </form>\r\n            </>\r\n          )}\r\n        </Formik>\r\n      </ModalWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditPost;\r\n","import { VFC } from 'react';\r\n\r\nimport { Paper, InputBase, Divider, IconButton } from '@mui/material';\r\nimport DirectionsIcon from '@mui/icons-material/Directions';\r\n\r\nconst PostURLField: VFC<{ url: string }> = ({ url }) => (\r\n  <Paper\r\n    component=\"form\"\r\n    sx={{ p: '2px 4px', display: 'flex', alignItems: 'center', width: '100%' }}\r\n  >\r\n    <InputBase\r\n      sx={{ ml: 1, flex: 1 }}\r\n      value={url}\r\n      inputProps={{ readOnly: true, 'aria-label': 'url' }}\r\n    />\r\n    <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\r\n    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n      <IconButton color=\"primary\" sx={{ p: '10px' }} aria-label=\"directions\">\r\n        <DirectionsIcon />\r\n      </IconButton>\r\n    </a>\r\n  </Paper>\r\n);\r\n\r\nexport default PostURLField;\r\n","import styled from 'styled-components';\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { Accordion } from '@material-ui/core';\r\n\r\nexport const PostListItemName = styled.p`\r\n  font-size: 16px;\r\n  padding: 15px 20px !important;\r\n  color: #79bd9a;\r\n`;\r\n\r\nexport const PostListItemText = styled.p`\r\n  font-size: 13px;\r\n  margin-top: 15px;\r\n  padding: 0 10px;\r\n  color: #454545;\r\n`;\r\n\r\nexport const PostListWrapper = styled.div``;\r\n\r\nexport const PostListItemWithCheckBox = styled.div`\r\n  display: flex;\r\n  justify-content: stretch;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const WCPostListItem = styled.div`\r\n  flex: auto;\r\n`;\r\n\r\nexport const PostCheckBox = styled.input`\r\n  width: 30px;\r\n  align-items: stretch;\r\n`;\r\n\r\nexport const PostCheckBoxWrapper = styled.div`\r\n  width: 0px;\r\n  text-align: center;\r\n  line-height: 74px;\r\n  transition: 0.3s;\r\n\r\n  &.active {\r\n    width: 40px;\r\n  }\r\n`;\r\n\r\nexport const PostEditButtonWrapper = styled.div`\r\n  width: 0px;\r\n  line-height: 74px;\r\n  transition: 0.3s;\r\n\r\n  & button {\r\n    opacity: 0;\r\n    transition: 0.3s;\r\n  }\r\n\r\n  &.active {\r\n    width: 40px;\r\n    & button {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const PostSectionHeader = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  height: 70px;\r\n  line-height: 70px;\r\n`;\r\n\r\nexport const PostCreateIconButton = styled(IconButton)`\r\n  display: none !important;\r\n  &.active {\r\n    display: block !important;\r\n  }\r\n`;\r\n\r\nexport const PostCreateAndSelectDeleteButton = styled.button`\r\n  appearance: none;\r\n  border: none;\r\n  border-radius: 5px;\r\n  display: block;\r\n  position: relative;\r\n  width: 100%;\r\n  padding: 0.6em;\r\n  text-align: center;\r\n`;\r\n\r\nexport const PostCreateButton = styled.button`\r\n  appearance: none;\r\n  border: none;\r\n  border-radius: 5px;\r\n  position: relative;\r\n  color: #79bd9a;\r\n  width: 100%;\r\n  padding: 0.6em;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  display: none;\r\n  font-size: 15px;\r\n  transition: 0.3s;\r\n  &.active {\r\n    display: block;\r\n  }\r\n  &:hover {\r\n    color: #00ff00;\r\n  }\r\n`;\r\n\r\nexport const PostSelectDeleteButton = styled.button`\r\n  appearance: none;\r\n  border: none;\r\n  border-radius: 5px;\r\n  position: relative;\r\n  color: red;\r\n  width: 100%;\r\n  padding: 0.6em;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  display: none;\r\n  &.active {\r\n    display: block;\r\n  }\r\n  &:disabled {\r\n    color: #ef9a9a;\r\n    cursor: default;\r\n  }\r\n`;\r\n\r\nexport const PostAccordion = styled(Accordion)``;\r\n","import { VFC } from 'react';\r\nimport Accordion from '@mui/material/Accordion';\r\nimport AccordionDetails from '@mui/material/AccordionDetails';\r\nimport AccordionSummary from '@mui/material/AccordionSummary';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport PostURLField from './PostURLField';\r\n\r\nimport { PostListItemName, PostListItemText } from './PostsElements';\r\n\r\ninterface POST {\r\n  id: string;\r\n  url: string;\r\n  name: string;\r\n  text: string;\r\n  folder: string;\r\n}\r\n\r\nconst PostListItem: VFC<{ post: POST }> = ({ post }) => (\r\n  <Accordion sx={{ borderBottom: '1px solid #a7a7a7' }}>\r\n    <AccordionSummary\r\n      expandIcon={<ExpandMoreIcon />}\r\n      aria-controls=\"panel1a-content\"\r\n      id=\"panel1a-header\"\r\n      sx={{ width: '100%' }}\r\n    >\r\n      <PostListItemName>{post.name}</PostListItemName>\r\n    </AccordionSummary>\r\n    <AccordionDetails>\r\n      <PostURLField url={post.url} />\r\n      <PostListItemText>{post.text}</PostListItemText>\r\n    </AccordionDetails>\r\n  </Accordion>\r\n);\r\n\r\nexport default PostListItem;\r\n","import { useState } from 'react';\r\n\r\ninterface useMultiplePostCheckedRet {\r\n  checked: string[];\r\n  toggleChecked: (tgt: string) => void;\r\n  allCheck: () => void;\r\n  clearCheck: () => void;\r\n}\r\n\r\nconst useMultiplePostChecked = (\r\n  canCheckItems: string[],\r\n  initVal?: string[]\r\n): useMultiplePostCheckedRet => {\r\n  const [checked, setChecked] = useState<string[]>(initVal || []);\r\n  const toggleChecked = (tgt: string) => {\r\n    if (checked.includes(tgt)) {\r\n      setChecked([...checked.filter((item) => item !== tgt)]);\r\n    } else {\r\n      setChecked([...checked.concat([tgt])]);\r\n    }\r\n  };\r\n\r\n  const allCheck = () => setChecked(canCheckItems);\r\n  const clearCheck = () => setChecked([]);\r\n\r\n  return {\r\n    checked,\r\n    toggleChecked,\r\n    allCheck,\r\n    clearCheck,\r\n  };\r\n};\r\n\r\nexport default useMultiplePostChecked;\r\n","import { VFC, useState, FormEvent } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport ChangeCircleIcon from '@mui/icons-material/ChangeCircle';\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\nimport { AppDispatch } from '../../../stores/app/store';\r\n\r\nimport { resetIsAuth } from '../../../stores/slices/auth/authSlice';\r\n\r\nimport { selectFolder } from '../../../stores/slices/folder/folderSlice';\r\n\r\nimport { selectMyProfile } from '../../../stores/slices/profile/profileSlice';\r\n\r\nimport {\r\n  selectPosts,\r\n  selectIsLoadingPost,\r\n  selectIsNewPost,\r\n  selectIsExistPosts,\r\n  setOpenNewPost,\r\n  fetchPostStart,\r\n  fetchPostEnd,\r\n  fetchAsyncGetPosts,\r\n  fetchAsyncDeleteSelectPost,\r\n  setIsExistPosts,\r\n  resetPostsCount,\r\n  setOpenEditPost,\r\n  resetIsNewPost,\r\n} from '../../../stores/slices/post/postSlice';\r\n\r\nimport {\r\n  MainBody,\r\n  FolderSection,\r\n  SearchSection,\r\n  SearchContent,\r\n  SearchFieldWrapper,\r\n  NotFoundText,\r\n  LoadingWrapper,\r\n} from '../main/MainElements';\r\n\r\nimport SearchBox from '../../atoms/Input/SearchBox';\r\nimport PostOrderSelect from '../../atoms/PostOrderSelect';\r\nimport Loading from '../../atoms/Loader';\r\nimport SearchButton from '../../atoms/Buttons/SearchButton';\r\n\r\nimport NewPost from './NewPost';\r\nimport EditPost from './EditPost';\r\nimport PostListItem from './PostsListItem';\r\nimport useMultiplePostChecked from './CheckPost';\r\n\r\nimport {\r\n  PostListItemWithCheckBox,\r\n  WCPostListItem,\r\n  PostCheckBoxWrapper,\r\n  PostEditButtonWrapper,\r\n  PostSectionHeader,\r\n  PostSelectDeleteButton,\r\n  PostCreateButton,\r\n} from './PostsElements';\r\n\r\nconst Posts: VFC = () => {\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const folder = useSelector(selectFolder);\r\n  const profile = useSelector(selectMyProfile);\r\n  const posts = useSelector(selectPosts);\r\n  const isExistPosts = useSelector(selectIsExistPosts);\r\n  const isNewPost = useSelector(selectIsNewPost);\r\n  const isLoadingPost = useSelector(selectIsLoadingPost);\r\n\r\n  const [searchText, setSearchText] = useState<string>('');\r\n  const [orderingText, setOrderingText] = useState<string>('');\r\n\r\n  const [hasMore, setHasMore] = useState<boolean>(true);\r\n\r\n  const [editPostId, setEditPostId] = useState<string>('');\r\n  const [editPostUrl, setEditPostUrl] = useState<string>('');\r\n  const [editPostName, setEditPostName] = useState<string>('');\r\n  const [editPostText, setEditPostText] = useState<string>('');\r\n\r\n  const [checkBoxToggle, setCheckBoxToggle] = useState<boolean>(false);\r\n\r\n  const { checked, toggleChecked, clearCheck } = useMultiplePostChecked(\r\n    posts.results.map((post) => post.id)\r\n  );\r\n\r\n  const loadMore = async () => {\r\n    dispatch(resetIsNewPost());\r\n    if (!folder.id) {\r\n      return;\r\n    }\r\n\r\n    const nextUrl = posts.next;\r\n    if (!nextUrl && posts.count !== 0) {\r\n      setHasMore(false);\r\n      return;\r\n    }\r\n\r\n    const result = await dispatch(\r\n      fetchAsyncGetPosts({\r\n        folder: folder.id,\r\n        params: {\r\n          url: nextUrl,\r\n          search: '',\r\n          ordering: '',\r\n        },\r\n      })\r\n    );\r\n    if (fetchAsyncGetPosts.rejected.match(result)) {\r\n      dispatch(resetPostsCount());\r\n      dispatch(resetIsAuth());\r\n    }\r\n  };\r\n\r\n  const searchPost = async (e: FormEvent<HTMLFormElement>) => {\r\n    clearCheck();\r\n\r\n    window.scrollTo({ top: 0 });\r\n    dispatch(resetIsNewPost());\r\n    e.preventDefault();\r\n    setHasMore(true);\r\n    dispatch(setIsExistPosts());\r\n    dispatch(fetchPostStart());\r\n    dispatch(resetPostsCount());\r\n    await dispatch(\r\n      fetchAsyncGetPosts({\r\n        folder: folder.id,\r\n        params: {\r\n          url: '',\r\n          search: searchText,\r\n          ordering: orderingText,\r\n        },\r\n      })\r\n    );\r\n\r\n    dispatch(fetchPostEnd());\r\n  };\r\n\r\n  const deleteSelectPost = async () => {\r\n    dispatch(fetchPostStart());\r\n    const result = await dispatch(fetchAsyncDeleteSelectPost(checked));\r\n    setCheckBoxToggle(false);\r\n    dispatch(fetchPostEnd());\r\n  };\r\n\r\n  const postListInMyFolder = (\r\n    <ul>\r\n      {posts.results.map((post) => (\r\n        <PostListItemWithCheckBox key={post.id}>\r\n          <PostCheckBoxWrapper className={checkBoxToggle ? 'active' : ''}>\r\n            <Checkbox\r\n              size=\"small\"\r\n              value={post.id}\r\n              onChange={() => toggleChecked(post.id)}\r\n              checked={checked.includes(post.id)}\r\n            />\r\n          </PostCheckBoxWrapper>\r\n\r\n          <WCPostListItem>\r\n            <PostListItem post={post} />\r\n          </WCPostListItem>\r\n\r\n          <PostEditButtonWrapper className={!checkBoxToggle ? 'active' : ''}>\r\n            <IconButton\r\n              type=\"button\"\r\n              aria-label=\"edit-post\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                setEditPostId(post.id);\r\n                setEditPostUrl(post.url);\r\n                setEditPostName(post.name);\r\n                setEditPostText(post.text);\r\n                dispatch(setOpenEditPost());\r\n              }}\r\n            >\r\n              <EditOutlinedIcon sx={{ color: '#79bd9a' }} />\r\n            </IconButton>\r\n          </PostEditButtonWrapper>\r\n        </PostListItemWithCheckBox>\r\n      ))}\r\n    </ul>\r\n  );\r\n\r\n  const postListOthers = (\r\n    <ul>\r\n      {posts.results.map((post) => (\r\n        <PostListItem post={post} key={post.id} />\r\n      ))}\r\n    </ul>\r\n  );\r\n\r\n  const loader = (\r\n    <LoadingWrapper className=\"loader\" key={0}>\r\n      <Loading />\r\n    </LoadingWrapper>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <NewPost />\r\n\r\n      {editPostId && (\r\n        <EditPost\r\n          id={editPostId}\r\n          url={editPostUrl}\r\n          name={editPostName}\r\n          text={editPostText}\r\n          folder={folder.id}\r\n        />\r\n      )}\r\n\r\n      <MainBody>\r\n        <SearchSection>\r\n          <SearchContent>\r\n            <SearchFieldWrapper>\r\n              <form onSubmit={(e) => searchPost(e)}>\r\n                <SearchBox changeEvent={(e) => setSearchText(e.target.value)} />\r\n                <PostOrderSelect\r\n                  selectValue={orderingText}\r\n                  changeEvent={(e) => setOrderingText(e.target.value)}\r\n                />\r\n                <SearchButton ButtonText=\"検索\" />\r\n              </form>\r\n            </SearchFieldWrapper>\r\n          </SearchContent>\r\n        </SearchSection>\r\n\r\n        <FolderSection>\r\n          {folder.user === profile.user && (\r\n            <PostSectionHeader>\r\n              <IconButton\r\n                type=\"button\"\r\n                aria-label=\"edit-post\"\r\n                onClick={() => {\r\n                  clearCheck();\r\n                  setCheckBoxToggle(!checkBoxToggle);\r\n                }}\r\n              >\r\n                <ChangeCircleIcon sx={{ color: '#79bd9a' }} />\r\n              </IconButton>\r\n              <PostCreateButton\r\n                type=\"button\"\r\n                aria-label=\"edit-post\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  dispatch(setOpenNewPost());\r\n                }}\r\n                className={!checkBoxToggle ? 'active' : ''}\r\n              >\r\n                作成\r\n              </PostCreateButton>\r\n\r\n              <PostSelectDeleteButton\r\n                type=\"button\"\r\n                disabled={checked.length === 0 || isLoadingPost}\r\n                onClick={deleteSelectPost}\r\n                className={checkBoxToggle ? 'active' : ''}\r\n              >\r\n                {checked.length}件削除\r\n              </PostSelectDeleteButton>\r\n            </PostSectionHeader>\r\n          )}\r\n          {/* ローディング中では無いかつ、ポストが存在するまたはポストが新しく作成された場合にポストリストが表示される */}\r\n          {!isLoadingPost ? (\r\n            isExistPosts ? (\r\n              <InfiniteScroll\r\n                loadMore={loadMore}\r\n                hasMore={hasMore}\r\n                loader={loader}\r\n              >\r\n                {folder.user === profile.user\r\n                  ? postListInMyFolder\r\n                  : postListOthers}\r\n              </InfiniteScroll>\r\n            ) : isNewPost ? (\r\n              <div>\r\n                {folder.user === profile.user\r\n                  ? postListInMyFolder\r\n                  : postListOthers}\r\n              </div>\r\n            ) : (\r\n              <NotFoundText>見つかりませんでした。</NotFoundText>\r\n            )\r\n          ) : (\r\n            <LoadingWrapper>\r\n              <Loading />\r\n            </LoadingWrapper>\r\n          )}\r\n        </FolderSection>\r\n      </MainBody>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","import { VFC, useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { IconButton } from '@material-ui/core';\r\nimport { amber } from '@mui/material/colors';\r\nimport StarIcon from '@mui/icons-material/Star';\r\nimport StarBorderIcon from '@mui/icons-material/StarBorder';\r\n\r\nimport { AppDispatch } from '../../../stores/app/store';\r\n\r\nimport {\r\n  resetIsAuth,\r\n  setAuthErrorMessage,\r\n} from '../../../stores/slices/auth/authSlice';\r\n\r\nimport { selectMyProfile } from '../../../stores/slices/profile/profileSlice';\r\n\r\nimport {\r\n  selectIsLoadingFavorite,\r\n  fetchFavoriteStart,\r\n  fetchFavoriteEnd,\r\n  fetchAsyncPostFavorite,\r\n} from '../../../stores/slices/folder/folderSlice';\r\n\r\nimport {\r\n  setInfoMessage,\r\n  setIsExistInfoMessage,\r\n  resetIsExistInfoMessage,\r\n} from '../../../stores/slices/message/messageSlice';\r\n\r\nimport Loading from '../Loader';\r\n\r\nconst FavoriteButton: VFC<{\r\n  id: string;\r\n  favorite: string[];\r\n}> = ({ id, favorite }) => {\r\n  const [isFavorite, setIsFavorite] = useState<boolean>(false);\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const myProfile = useSelector(selectMyProfile);\r\n  const isLoadingFavorite = useSelector(selectIsLoadingFavorite);\r\n\r\n  useEffect(() => {\r\n    favorite.forEach((user) => {\r\n      if (user === myProfile.user) {\r\n        setIsFavorite(true);\r\n      }\r\n    });\r\n  }, [favorite, myProfile.user]);\r\n\r\n  const clickFavoriteIcon = async () => {\r\n    dispatch(fetchFavoriteStart());\r\n    dispatch(resetIsExistInfoMessage());\r\n    const result = await dispatch(fetchAsyncPostFavorite(id));\r\n    if (fetchAsyncPostFavorite.rejected.match(result)) {\r\n      dispatch(\r\n        setAuthErrorMessage(\r\n          'アクセストークンの有効期限が切れました。再ログインしてください'\r\n        )\r\n      );\r\n      dispatch(resetIsAuth());\r\n    }\r\n    if (fetchAsyncPostFavorite.fulfilled.match(result)) {\r\n      dispatch(resetIsExistInfoMessage());\r\n      setIsFavorite(!isFavorite);\r\n      dispatch(fetchFavoriteEnd());\r\n      if (isFavorite) {\r\n        dispatch(setInfoMessage('お気に入りを解除しました'));\r\n      } else {\r\n        dispatch(setInfoMessage('お気に入りに登録しました'));\r\n      }\r\n      dispatch(setIsExistInfoMessage());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!isLoadingFavorite ? (\r\n        <IconButton\r\n          type=\"button\"\r\n          component=\"button\"\r\n          onClick={clickFavoriteIcon}\r\n        >\r\n          {isFavorite ? (\r\n            <StarIcon sx={{ color: amber[300] }} />\r\n          ) : (\r\n            <StarBorderIcon sx={{ color: amber[300] }} />\r\n          )}\r\n        </IconButton>\r\n      ) : (\r\n        <Loading />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FavoriteButton;\r\n","import { VFC } from 'react';\r\n\r\nimport { red } from '@mui/material/colors';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteForeverOutlinedIcon from '@mui/icons-material/DeleteForeverOutlined';\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\n\r\nimport FavoriteButton from '../../atoms/Buttons/FavoriteButton';\r\nimport {\r\n  FolderDetailInfoWrapper,\r\n  FolderDetailInfoData,\r\n  FolderDetailInfoDataTitle,\r\n  FolderDetailInfoButtons,\r\n  FolderDetailInfoDataText,\r\n} from './FolderElements';\r\n\r\ninterface FOLDER {\r\n  id: string;\r\n  user: string;\r\n  name: string;\r\n  public: boolean;\r\n  posts_add: string;\r\n  favorite: string[];\r\n}\r\n\r\nconst FolderDetailInfo: VFC<{\r\n  folder: FOLDER;\r\n  user: string;\r\n  openEditFolder: () => void;\r\n  openDeleteFolder: () => void;\r\n}> = ({ folder, user, openEditFolder, openDeleteFolder }) => (\r\n  <FolderDetailInfoWrapper>\r\n    <FolderDetailInfoData>\r\n      <FolderDetailInfoDataTitle>{folder.name}</FolderDetailInfoDataTitle>\r\n      <FolderDetailInfoDataText>User: {folder.user}</FolderDetailInfoDataText>\r\n      <FolderDetailInfoDataText>\r\n        作成日: {folder.posts_add}\r\n      </FolderDetailInfoDataText>\r\n    </FolderDetailInfoData>\r\n    <FolderDetailInfoButtons>\r\n      <FavoriteButton id={folder.id} favorite={folder.favorite} />\r\n      {folder.user === user && (\r\n        <>\r\n          <IconButton aria-label=\"edit\" size=\"large\" onClick={openEditFolder}>\r\n            <EditOutlinedIcon fontSize=\"inherit\" sx={{ color: '#79bd9a' }} />\r\n          </IconButton>\r\n          <IconButton\r\n            aria-label=\"delete\"\r\n            size=\"large\"\r\n            onClick={openDeleteFolder}\r\n          >\r\n            <DeleteForeverOutlinedIcon\r\n              fontSize=\"inherit\"\r\n              sx={{ color: red[300] }}\r\n            />\r\n          </IconButton>\r\n        </>\r\n      )}\r\n    </FolderDetailInfoButtons>\r\n  </FolderDetailInfoWrapper>\r\n);\r\n\r\nexport default FolderDetailInfo;\r\n","import { VFC, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport { AppDispatch } from '../../../stores/app/store';\r\n\r\nimport {\r\n  resetIsAuth,\r\n  setAuthErrorMessage,\r\n} from '../../../stores/slices/auth/authSlice';\r\n\r\nimport { selectMyProfile } from '../../../stores/slices/profile/profileSlice';\r\n\r\nimport {\r\n  selectFolder,\r\n  selectIsLoadingFolder,\r\n  selectOpenDeleteFolder,\r\n  setOpenEditFolder,\r\n  setOpenDeleteFolder,\r\n  resetOpenDeleteFolder,\r\n  fetchFolderStart,\r\n  fetchFolderEnd,\r\n  fetchAsyncGetFolder,\r\n  fetchAsyncDeleteFolder,\r\n} from '../../../stores/slices/folder/folderSlice';\r\n\r\nimport {\r\n  setInfoMessage,\r\n  setIsExistInfoMessage,\r\n} from '../../../stores/slices/message/messageSlice';\r\n\r\nimport { selectActiveIndex } from '../../../stores/slices/bar/barSlice';\r\n\r\nimport CommonDialog from '../../atoms/Dialog';\r\nimport TopLinkButton from '../../atoms/Buttons/TopLinkButton';\r\nimport Loading from '../../atoms/Loader';\r\n\r\nimport EditFolder from '../../blocks/folder/EditFolder';\r\nimport Posts from '../../blocks/post/Posts';\r\nimport { SidebarData } from '../../blocks/bar/SidebarData';\r\nimport MainHeader from '../../blocks/main/MainHeader';\r\nimport { LoadingWrapper } from '../../blocks/main/MainElements';\r\nimport FolderDetailInfo from '../../blocks/folder/FolderDetailInfo';\r\n\r\ninterface URLParams {\r\n  id: string;\r\n}\r\n\r\nconst FolderDetail: VFC = () => {\r\n  const { id } = useParams<URLParams>();\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const history = useHistory();\r\n  const myprofile = useSelector(selectMyProfile);\r\n  const folder = useSelector(selectFolder);\r\n  const isLoadingFolder = useSelector(selectIsLoadingFolder);\r\n  const openDeleteFolder = useSelector(selectOpenDeleteFolder);\r\n  const activeIndex = useSelector(selectActiveIndex);\r\n\r\n  useEffect(() => {\r\n    const fetchGetFolders = async () => {\r\n      if (folder.id && folder.id === id) {\r\n        return;\r\n      }\r\n\r\n      dispatch(fetchFolderStart());\r\n      const result = await dispatch(fetchAsyncGetFolder(id));\r\n      if (fetchAsyncGetFolder.rejected.match(result)) {\r\n        dispatch(\r\n          setAuthErrorMessage(\r\n            'アクセストークンの有効期限が切れました。再ログインしてください'\r\n          )\r\n        );\r\n        dispatch(resetIsAuth());\r\n      }\r\n      dispatch(fetchFolderEnd());\r\n    };\r\n    fetchGetFolders().catch((e) => {\r\n      console.log(e);\r\n    });\r\n  }, [dispatch, folder.id, id]);\r\n\r\n  const deleteFolder = async () => {\r\n    const result = await dispatch(fetchAsyncDeleteFolder({ id: folder.id }));\r\n    if (fetchAsyncDeleteFolder.rejected.match(result)) {\r\n      dispatch(\r\n        setAuthErrorMessage(\r\n          'アクセストークンの有効期限が切れました。再ログインしてください'\r\n        )\r\n      );\r\n      dispatch(resetIsAuth());\r\n    }\r\n    if (fetchAsyncDeleteFolder.fulfilled.match(result)) {\r\n      dispatch(setInfoMessage('フォルダを削除しました'));\r\n      dispatch(setIsExistInfoMessage());\r\n      history.replace(SidebarData[activeIndex].path);\r\n    }\r\n    dispatch(resetOpenDeleteFolder());\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {myprofile.user === folder.user && (\r\n        <div>\r\n          <CommonDialog\r\n            msg=\"本当に削除しますか？\"\r\n            isOpen={openDeleteFolder}\r\n            doYes={deleteFolder}\r\n            doNo={() => {\r\n              dispatch(resetOpenDeleteFolder());\r\n            }}\r\n          />\r\n          {!isLoadingFolder && <EditFolder />}\r\n        </div>\r\n      )}\r\n\r\n      <MainHeader\r\n        title={folder.name}\r\n        isHistory\r\n        buttonElem={<TopLinkButton />}\r\n      />\r\n      {!isLoadingFolder ? (\r\n        <FolderDetailInfo\r\n          folder={folder}\r\n          user={myprofile.user}\r\n          openEditFolder={() => {\r\n            dispatch(setOpenEditFolder());\r\n          }}\r\n          openDeleteFolder={() => {\r\n            dispatch(setOpenDeleteFolder());\r\n          }}\r\n        />\r\n      ) : (\r\n        <LoadingWrapper className=\"loader\" key={0}>\r\n          <Loading />\r\n        </LoadingWrapper>\r\n      )}\r\n\r\n      {!isLoadingFolder && <Posts />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FolderDetail;\r\n","import { VFC } from 'react';\r\n\r\nimport {\r\n  Box,\r\n  InputLabel,\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n  SelectChangeEvent,\r\n} from '@mui/material';\r\n\r\nconst OrderSelect: VFC<{\r\n  selectValue: string;\r\n  changeEvent: (e: SelectChangeEvent<string>) => void;\r\n}> = ({ selectValue, changeEvent }) => (\r\n  <Box sx={{ minWidth: 120 }}>\r\n    <FormControl fullWidth>\r\n      <InputLabel id=\"demo-simple-select-label\">並べ替え</InputLabel>\r\n      <Select\r\n        labelId=\"demo-simple-select-label\"\r\n        id=\"demo-simple-select\"\r\n        value={selectValue}\r\n        label=\"並べ替え\"\r\n        onChange={changeEvent}\r\n      >\r\n        <MenuItem value=\"-posts_add\">新しい順</MenuItem>\r\n        <MenuItem value=\"posts_add\">古い順</MenuItem>\r\n        <MenuItem value=\"-favorite\">お気に入り数</MenuItem>\r\n      </Select>\r\n    </FormControl>\r\n  </Box>\r\n);\r\n\r\nexport default OrderSelect;\r\n","import { VFC, useEffect, useState, FormEvent } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\nimport Divider from '@mui/material/Divider';\r\n\r\nimport { AppDispatch } from '../../../stores/app/store';\r\n\r\nimport {\r\n  resetIsAuth,\r\n  setAuthErrorMessage,\r\n} from '../../../stores/slices/auth/authSlice';\r\n\r\nimport {\r\n  selectFolders,\r\n  selectIsLoadingFolder,\r\n  selectIsExistFolders,\r\n  fetchFolderStart,\r\n  fetchFolderEnd,\r\n  fetchAsyncGetFolders,\r\n  setFolder,\r\n  setIsExistFolders,\r\n  resetFoldersCount,\r\n} from '../../../stores/slices/folder/folderSlice';\r\n\r\nimport { resetPosts } from '../../../stores/slices/post/postSlice';\r\n\r\nimport { setActiveIndex } from '../../../stores/slices/bar/barSlice';\r\n\r\nimport SearchBox from '../../atoms/Input/SearchBox';\r\nimport OrderSelect from '../../atoms/OrderSelect';\r\nimport SearchButton from '../../atoms/Buttons/SearchButton';\r\nimport Loading from '../../atoms/Loader';\r\nimport TopLinkButton from '../../atoms/Buttons/TopLinkButton';\r\n\r\nimport {\r\n  MainBody,\r\n  FolderSection,\r\n  SearchSection,\r\n  SearchContent,\r\n  SearchFieldWrapper,\r\n  NotFoundText,\r\n  LoadingWrapper,\r\n} from '../../blocks/main/MainElements';\r\n\r\nimport FolderList from '../../blocks/folder/FolderList';\r\nimport FolderListItem from '../../blocks/folder/FolderListItem';\r\nimport { FolderItemLink } from '../../blocks/folder/FolderElements';\r\nimport MainHeader from '../../blocks/main/MainHeader';\r\n\r\nconst FoldersPage: VFC = () => {\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const folders = useSelector(selectFolders);\r\n  const isExistFolders = useSelector(selectIsExistFolders);\r\n  const isLoadingFolder = useSelector(selectIsLoadingFolder);\r\n\r\n  const [searchText, setSearchText] = useState<string>('');\r\n  const [orderingText, setOrderingText] = useState<string>('');\r\n\r\n  const [hasMore, setHasMore] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    dispatch(setActiveIndex(2));\r\n  }, [dispatch]);\r\n\r\n  const loadMore = async () => {\r\n    const nextUrl = folders.next;\r\n    if (!nextUrl && folders.count !== 0) {\r\n      setHasMore(false);\r\n      return;\r\n    }\r\n\r\n    const result = await dispatch(\r\n      fetchAsyncGetFolders({\r\n        url: nextUrl,\r\n        search: '',\r\n        ordering: '',\r\n      })\r\n    );\r\n    if (fetchAsyncGetFolders.rejected.match(result)) {\r\n      dispatch(\r\n        setAuthErrorMessage(\r\n          'アクセストークンの有効期限が切れました。再ログインしてください'\r\n        )\r\n      );\r\n      dispatch(resetIsAuth());\r\n    }\r\n  };\r\n\r\n  const searchFolder = async (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    window.scrollTo({ top: 0 });\r\n    setHasMore(true);\r\n    dispatch(setIsExistFolders());\r\n    dispatch(fetchFolderStart());\r\n    dispatch(resetFoldersCount());\r\n    const result = await dispatch(\r\n      fetchAsyncGetFolders({\r\n        url: '',\r\n        search: searchText,\r\n        ordering: orderingText,\r\n      })\r\n    );\r\n    if (fetchAsyncGetFolders.rejected.match(result)) {\r\n      dispatch(\r\n        setAuthErrorMessage(\r\n          'アクセストークンの有効期限が切れました。再ログインしてください'\r\n        )\r\n      );\r\n      dispatch(resetIsAuth());\r\n    }\r\n    dispatch(fetchFolderEnd());\r\n  };\r\n\r\n  const foldersList = (\r\n    <FolderList>\r\n      {folders.results.map((folder) => (\r\n        <FolderItemLink\r\n          key={folder.id}\r\n          to={`/folder/${folder.id}`}\r\n          onClick={() => {\r\n            dispatch(\r\n              setFolder({\r\n                id: folder.id,\r\n                user: folder.user,\r\n                name: folder.name,\r\n                public: folder.public,\r\n                posts_add: folder.posts_add,\r\n                favorite: folder.favorite,\r\n              })\r\n            );\r\n            dispatch(resetPosts());\r\n          }}\r\n        >\r\n          <FolderListItem folder={folder} />\r\n          <Divider />\r\n        </FolderItemLink>\r\n      ))}\r\n    </FolderList>\r\n  );\r\n\r\n  const loader = (\r\n    <LoadingWrapper className=\"loader\" key={0}>\r\n      <Loading />\r\n    </LoadingWrapper>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <MainHeader\r\n        title=\"Global\"\r\n        isHistory={false}\r\n        buttonElem={<TopLinkButton />}\r\n      />\r\n      <MainBody>\r\n        <SearchSection>\r\n          <SearchContent>\r\n            <SearchFieldWrapper>\r\n              <form onSubmit={(e) => searchFolder(e)}>\r\n                <SearchBox changeEvent={(e) => setSearchText(e.target.value)} />\r\n                <OrderSelect\r\n                  selectValue={orderingText}\r\n                  changeEvent={(e) => setOrderingText(e.target.value)}\r\n                />\r\n                <SearchButton ButtonText=\"検索\" />\r\n              </form>\r\n            </SearchFieldWrapper>\r\n          </SearchContent>\r\n        </SearchSection>\r\n        <FolderSection>\r\n          {!isLoadingFolder ? (\r\n            isExistFolders ? (\r\n              <InfiniteScroll\r\n                loadMore={loadMore}\r\n                hasMore={hasMore}\r\n                loader={loader}\r\n              >\r\n                {foldersList}\r\n              </InfiniteScroll>\r\n            ) : (\r\n              <NotFoundText>フォルダが見つかりませんでした。</NotFoundText>\r\n            )\r\n          ) : (\r\n            <LoadingWrapper>\r\n              <Loading />\r\n            </LoadingWrapper>\r\n          )}\r\n        </FolderSection>\r\n      </MainBody>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FoldersPage;\r\n","import { VFC } from 'react';\r\n\r\nimport {\r\n  Box,\r\n  InputLabel,\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n  SelectChangeEvent,\r\n} from '@mui/material';\r\n\r\nconst FavoriteFolderOrderSelect: VFC<{\r\n  selectValue: string;\r\n  changeEvent: (e: SelectChangeEvent<string>) => void;\r\n}> = ({ selectValue, changeEvent }) => (\r\n  <Box sx={{ minWidth: 120 }}>\r\n    <FormControl fullWidth>\r\n      <InputLabel id=\"demo-simple-select-label\">並べ替え</InputLabel>\r\n      <Select\r\n        labelId=\"demo-simple-select-label\"\r\n        id=\"demo-simple-select\"\r\n        value={selectValue}\r\n        label=\"並べ替え\"\r\n        onChange={changeEvent}\r\n      >\r\n        <MenuItem value=\"-posts_add\">新しい順</MenuItem>\r\n        <MenuItem value=\"posts_add\">古い順</MenuItem>\r\n      </Select>\r\n    </FormControl>\r\n  </Box>\r\n);\r\n\r\nexport default FavoriteFolderOrderSelect;\r\n","import { VFC, useEffect, useState, FormEvent } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\nimport Divider from '@mui/material/Divider';\r\n\r\nimport { AppDispatch } from '../../../stores/app/store';\r\n\r\nimport {\r\n  resetIsAuth,\r\n  setAuthErrorMessage,\r\n} from '../../../stores/slices/auth/authSlice';\r\n\r\nimport { selectMyProfile } from '../../../stores/slices/profile/profileSlice';\r\n\r\nimport {\r\n  selectFavoriteFolders,\r\n  selectIsLoadingFolder,\r\n  selectIsExistFavoriteFolders,\r\n  fetchFolderStart,\r\n  fetchFolderEnd,\r\n  fetchAsyncGetFavoriteFolders,\r\n  setFolder,\r\n  setIsExistFavoriteFolders,\r\n  resetFavoriteFoldersCount,\r\n} from '../../../stores/slices/folder/folderSlice';\r\n\r\nimport { resetPosts } from '../../../stores/slices/post/postSlice';\r\n\r\nimport { setActiveIndex } from '../../../stores/slices/bar/barSlice';\r\n\r\nimport SearchBox from '../../atoms/Input/SearchBox';\r\nimport FavoriteFolderOrderSelect from '../../atoms/FavoriteFolerOrderSelect';\r\nimport SearchButton from '../../atoms/Buttons/SearchButton';\r\nimport Loading from '../../atoms/Loader';\r\nimport TopLinkButton from '../../atoms/Buttons/TopLinkButton';\r\n\r\nimport {\r\n  MainBody,\r\n  FolderSection,\r\n  SearchSection,\r\n  SearchContent,\r\n  SearchFieldWrapper,\r\n  NotFoundText,\r\n  LoadingWrapper,\r\n} from '../../blocks/main/MainElements';\r\nimport FolderList from '../../blocks/folder/FolderList';\r\nimport FolderListItem from '../../blocks/folder/FolderListItem';\r\nimport { FolderItemLink } from '../../blocks/folder/FolderElements';\r\nimport MainHeader from '../../blocks/main/MainHeader';\r\n\r\nconst FavoriteFoldersPage: VFC = () => {\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const folders = useSelector(selectFavoriteFolders);\r\n  const isExistFolders = useSelector(selectIsExistFavoriteFolders);\r\n  const isLoadingFolder = useSelector(selectIsLoadingFolder);\r\n  const myprofile = useSelector(selectMyProfile);\r\n\r\n  const [searchText, setSearchText] = useState<string>('');\r\n  const [orderingText, setOrderingText] = useState<string>('');\r\n\r\n  const [hasMore, setHasMore] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    dispatch(setActiveIndex(3));\r\n  }, [dispatch]);\r\n\r\n  const loadMore = async () => {\r\n    const nextUrl = folders.next;\r\n    if (!nextUrl && folders.count !== 0) {\r\n      setHasMore(false);\r\n      return;\r\n    }\r\n\r\n    const result = await dispatch(\r\n      fetchAsyncGetFavoriteFolders({\r\n        url: nextUrl,\r\n        search: '',\r\n        ordering: '',\r\n      })\r\n    );\r\n    if (fetchAsyncGetFavoriteFolders.rejected.match(result)) {\r\n      dispatch(\r\n        setAuthErrorMessage(\r\n          'アクセストークンの有効期限が切れました。再ログインしてください'\r\n        )\r\n      );\r\n      dispatch(resetIsAuth());\r\n    }\r\n  };\r\n\r\n  const searchFolder = async (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    window.scrollTo({ top: 0 });\r\n    setHasMore(true);\r\n    dispatch(setIsExistFavoriteFolders());\r\n    dispatch(fetchFolderStart());\r\n    dispatch(resetFavoriteFoldersCount());\r\n    const result = await dispatch(\r\n      fetchAsyncGetFavoriteFolders({\r\n        url: '',\r\n        search: searchText,\r\n        ordering: orderingText,\r\n      })\r\n    );\r\n    if (fetchAsyncGetFavoriteFolders.rejected.match(result)) {\r\n      dispatch(\r\n        setAuthErrorMessage(\r\n          'アクセストークンの有効期限が切れました。再ログインしてください'\r\n        )\r\n      );\r\n      dispatch(resetIsAuth());\r\n    }\r\n    dispatch(fetchFolderEnd());\r\n  };\r\n\r\n  const foldersList = (\r\n    <FolderList>\r\n      {folders.results.map((result) => {\r\n        const folder = {\r\n          id: result.folder.id,\r\n          user: result.folder.user,\r\n          name: result.folder.name,\r\n          public: result.folder.public,\r\n          posts_add: result.folder.posts_add,\r\n          favorite: [myprofile.user],\r\n        };\r\n        return (\r\n          <FolderItemLink\r\n            key={folder.id}\r\n            to={`/folder/${folder.id}`}\r\n            onClick={() => {\r\n              dispatch(setFolder(folder));\r\n              dispatch(resetPosts());\r\n            }}\r\n          >\r\n            <FolderListItem folder={folder} />\r\n            <Divider />\r\n          </FolderItemLink>\r\n        );\r\n      })}\r\n    </FolderList>\r\n  );\r\n\r\n  const loader = (\r\n    <LoadingWrapper className=\"loader\" key={0}>\r\n      <Loading />\r\n    </LoadingWrapper>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <MainHeader\r\n        title=\"Favorite\"\r\n        isHistory={false}\r\n        buttonElem={<TopLinkButton />}\r\n      />\r\n      <MainBody>\r\n        <SearchSection>\r\n          <SearchContent>\r\n            <SearchFieldWrapper>\r\n              <form onSubmit={(e) => searchFolder(e)}>\r\n                <SearchBox changeEvent={(e) => setSearchText(e.target.value)} />\r\n                <FavoriteFolderOrderSelect\r\n                  selectValue={orderingText}\r\n                  changeEvent={(e) => setOrderingText(e.target.value)}\r\n                />\r\n                <SearchButton ButtonText=\"検索\" />\r\n              </form>\r\n            </SearchFieldWrapper>\r\n          </SearchContent>\r\n        </SearchSection>\r\n        <FolderSection>\r\n          {!isLoadingFolder ? (\r\n            isExistFolders ? (\r\n              <InfiniteScroll\r\n                loadMore={loadMore}\r\n                hasMore={hasMore}\r\n                loader={loader}\r\n              >\r\n                {foldersList}\r\n              </InfiniteScroll>\r\n            ) : (\r\n              <NotFoundText>フォルダが見つかりませんでした。</NotFoundText>\r\n            )\r\n          ) : (\r\n            <LoadingWrapper>\r\n              <Loading />\r\n            </LoadingWrapper>\r\n          )}\r\n        </FolderSection>\r\n      </MainBody>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FavoriteFoldersPage;\r\n","import { VFC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Route, Redirect, useLocation } from 'react-router-dom';\r\n\r\nimport { selectIsAuth } from '../../stores/slices/auth/authSlice';\r\n\r\nimport { PrivateRouteProps } from './types';\r\n\r\nconst PrivateRoute: VFC<PrivateRouteProps> = ({ children, ...rest }) => {\r\n  const location = useLocation();\r\n  const isAuth = useSelector(selectIsAuth);\r\n\r\n  sessionStorage.setItem('location', location.pathname);\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={() =>\r\n        isAuth ? (\r\n          children\r\n        ) : (\r\n          <Redirect\r\n            from={location.pathname}\r\n            to={{\r\n              pathname: '/login',\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import { VFC } from 'react';\r\nimport { Route, Redirect, RouteProps } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { selectIsAuth } from '../../stores/slices/auth/authSlice';\r\n\r\nconst UnAuthRoute: VFC<RouteProps> = ({ ...props }) => {\r\n  const isAuth = useSelector(selectIsAuth);\r\n  const location = sessionStorage.getItem('location');\r\n  if (isAuth) {\r\n    if (location) {\r\n      return <Redirect to={location} />;\r\n    }\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n  return <Route {...props} />;\r\n};\r\n\r\nexport default UnAuthRoute;\r\n","import { VFC, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst ScrollToTop: VFC = () => {\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [location.pathname]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default ScrollToTop;\r\n","import styled from 'styled-components';\r\n\r\nexport const MainElems = styled.div`\r\n  padding: 80px 10%;\r\n\r\n  @media only screen and (max-width: 767px) {\r\n    padding: 80px 5%;\r\n  }\r\n`;\r\n\r\nexport const SideElems = styled.div`\r\n  width: 100px;\r\n`;\r\n\r\nexport const Footer = styled.footer`\r\n  height: 100px;\r\n`;\r\n","import { VFC } from 'react';\r\nimport { Switch, HashRouter } from 'react-router-dom';\r\n\r\nimport '../../App.css';\r\n\r\nimport Navbar from '../blocks/bar/navbar/Navbar';\r\nimport Sidebar from '../blocks/bar/sidebar/Sidebar';\r\nimport InfoAlert from '../atoms/Alert/InfoAlert';\r\nimport LoginPage from '../pages/auth/Login';\r\nimport SignUpPage from '../pages/auth/SignUp/SignUp';\r\nimport SignUpAfterPage from '../pages/auth/SignUp/SignUpAfter';\r\nimport UserActivePage from '../pages/auth/SignUp/UserActive';\r\nimport ResetPasswordPage from '../pages/auth/ResetPassword/ResetPassword';\r\nimport ResetPasswordAfterPage from '../pages/auth/ResetPassword/ResetPasswordAfter';\r\nimport ResetPasswordCofirmPage from '../pages/auth/ResetPassword/ResetPasswordConfirm';\r\nimport Profile from '../pages/profile/Profile';\r\nimport MyFoldersPage from '../pages/folder/MyFolders';\r\nimport FolderDetail from '../pages/folder/FolderDetail';\r\nimport FoldersPage from '../pages/folder/Folders';\r\nimport FavoriteFoldersPage from '../pages/folder/FavoriteFolders';\r\n\r\nimport PrivateRoute from './PrivateRoute';\r\nimport UnAuthRoute from './UnAuthRoute';\r\nimport ScrollToTop from './ScrollToTop';\r\n\r\nimport { MainElems } from './RouteElements';\r\n\r\nconst RouteComponent: VFC = () => (\r\n  <HashRouter basename=\"/\">\r\n    <ScrollToTop />\r\n    <Sidebar />\r\n    <Navbar />\r\n    <MainElems>\r\n      <Switch>\r\n        <UnAuthRoute exact path=\"/login\" component={LoginPage} />\r\n        <UnAuthRoute exact path=\"/signup\" component={SignUpPage} />\r\n        <UnAuthRoute exact path=\"/signup/after\" component={SignUpAfterPage} />\r\n\r\n        <UnAuthRoute\r\n          exact\r\n          path=\"/password/reset\"\r\n          component={ResetPasswordPage}\r\n        />\r\n        <UnAuthRoute\r\n          exact\r\n          path=\"/activate/:uid/:token\"\r\n          component={UserActivePage}\r\n        />\r\n        <UnAuthRoute\r\n          exact\r\n          path=\"/password/reset/confirm/:uid/:token\"\r\n          component={ResetPasswordCofirmPage}\r\n        />\r\n        <UnAuthRoute\r\n          exact\r\n          path=\"/password/reset/after\"\r\n          component={ResetPasswordAfterPage}\r\n        />\r\n        <PrivateRoute exact path=\"/\">\r\n          <MyFoldersPage />\r\n        </PrivateRoute>\r\n        <PrivateRoute exact path=\"/mypage\">\r\n          <Profile />\r\n        </PrivateRoute>\r\n        <PrivateRoute exact path=\"/folder\">\r\n          <FoldersPage />\r\n        </PrivateRoute>\r\n        <PrivateRoute exact path=\"/folder/favorite\">\r\n          <FavoriteFoldersPage />\r\n        </PrivateRoute>\r\n        <PrivateRoute exact path=\"/folder/:id\">\r\n          <FolderDetail />\r\n        </PrivateRoute>\r\n      </Switch>\r\n    </MainElems>\r\n    <InfoAlert />\r\n  </HashRouter>\r\n);\r\n\r\nexport default RouteComponent;\r\n","import styled, { keyframes } from 'styled-components';\r\n\r\nexport const LoadingScreenBody = styled.div`\r\n  height: 100vh;\r\n  width: 100%;\r\n  position: relative;\r\n  background: #f8f8f8;\r\n`;\r\n\r\nconst fadeIn = keyframes`\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n`;\r\n\r\nexport const LoadingText = styled.p`\r\n  position: absolute;\r\n  color: #79bd9a;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  font-size: 1em;\r\n  & span {\r\n    padding: 0 3px;\r\n    animation: ${fadeIn} 1s infinite;\r\n  }\r\n  & span:nth-child(2) {\r\n    animation-delay: 100ms;\r\n  }\r\n  & span:nth-child(3) {\r\n    animation-delay: 200ms;\r\n  }\r\n  & span:nth-child(4) {\r\n    animation-delay: 300ms;\r\n  }\r\n  & span:nth-child(5) {\r\n    animation-delay: 400ms;\r\n  }\r\n  & span:nth-child(6) {\r\n    animation-delay: 500ms;\r\n  }\r\n  & span:nth-child(7) {\r\n    animation-delay: 600ms;\r\n  }\r\n  & span:nth-child(8) {\r\n    animation-delay: 700ms;\r\n  }\r\n  & span:nth-child(9) {\r\n    animation-delay: 800ms;\r\n  }\r\n  & span:nth-child(10) {\r\n    animation-delay: 900ms;\r\n  }\r\n`;\r\n","import { VFC } from 'react';\r\nimport { LoadingScreenBody, LoadingText } from './LoadingScreenElements';\r\n\r\nconst LoadingScreen: VFC = () => (\r\n  <LoadingScreenBody>\r\n    <LoadingText>\r\n      <span>L</span>\r\n      <span>o</span>\r\n      <span>a</span>\r\n      <span>d</span>\r\n      <span>i</span>\r\n      <span>n</span>\r\n      <span>g</span>\r\n      <span>.</span>\r\n      <span>.</span>\r\n      <span>.</span>\r\n    </LoadingText>\r\n  </LoadingScreenBody>\r\n);\r\n\r\nexport default LoadingScreen;\r\n","import { VFC, useEffect } from 'react';\nimport './App.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AppDispatch } from './stores/app/store';\nimport RouteComponent from './components/route/Route';\n\nimport {\n  setIsAuth,\n  resetIsAuth,\n  setAuthErrorMessage,\n} from './stores/slices/auth/authSlice';\n\nimport {\n  fetchProfStart,\n  fetchProfEnd,\n  fetchAsyncGetMyProf,\n  selectIsLoadingProf,\n} from './stores/slices/profile/profileSlice';\n\nimport {\n  fetchFolderStart,\n  fetchFolderEnd,\n  fetchAsyncGetMyFolders,\n} from './stores/slices/folder/folderSlice';\n\nimport LoadingScreen from './components/blocks/LoadingScreen/LoadingScreen';\n\nconst App: VFC = () => {\n  const dispatch: AppDispatch = useDispatch();\n  const isLoadingProf = useSelector(selectIsLoadingProf);\n\n  useEffect(() => {\n    const fetchDataLoader = async () => {\n      dispatch(setIsAuth());\n      dispatch(fetchProfStart());\n      const result = await dispatch(fetchAsyncGetMyProf());\n      if (fetchAsyncGetMyProf.rejected.match(result)) {\n        if (!localStorage.ajt) {\n          dispatch(\n            setAuthErrorMessage(\n              'ログインまたはアカウントの作成を行ってください'\n            )\n          );\n        } else {\n          dispatch(\n            setAuthErrorMessage(\n              'アクセストークンの有効期限が切れています。再ログインしてください'\n            )\n          );\n        }\n        dispatch(resetIsAuth());\n        dispatch(fetchProfEnd());\n        return;\n      }\n      if (fetchAsyncGetMyProf.fulfilled.match(result)) {\n        dispatch(fetchFolderStart());\n        await dispatch(fetchAsyncGetMyFolders());\n        dispatch(fetchFolderEnd());\n      }\n      dispatch(fetchProfEnd());\n    };\n    fetchDataLoader().catch((e) => {\n      console.log(e);\n    });\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      {!isLoadingProf ? <RouteComponent /> : <LoadingScreen />}\n    </div>\n  );\n};\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport authReducer from '../slices/auth/authSlice';\nimport profileReducer from '../slices/profile/profileSlice';\nimport folderReducer from '../slices/folder/folderSlice';\nimport postReducer from '../slices/post/postSlice';\nimport messageReducer from '../slices/message/messageSlice';\nimport barReducer from '../slices/bar/barSlice';\n\nexport const store = configureStore({\n  reducer: {\n    auth: authReducer,\n    profile: profileReducer,\n    message: messageReducer,\n    bar: barReducer,\n    folder: folderReducer,\n    post: postReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './core/App';\nimport { store } from './core/stores/app/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}